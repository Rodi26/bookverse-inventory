name: CI

# NOTE: Manual trigger only during development phase
# Will be changed to automatic triggers (push/PR) when demo is ready
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing'
        type: string
      verified_only:
        description: 'Run only the verified-evidence attachment job'
        required: false
        type: boolean
        default: false

jobs:
  build-test-publish:
    if: ${{ !inputs.verified_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      build_name: ${{ steps.finalize-build-info.outputs.build_name }}
      build_number: ${{ steps.finalize-build-info.outputs.build_number }}
      app_version: ${{ steps.set-app-version.outputs.app_version }}
      coverage_percent: ${{ steps.test-coverage.outputs.coverage_percent }}


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure HTTP debug verbosity
        run: |
          # HTTP_DEBUG_LEVEL: none|basic|verbose (default basic)
          case "${HTTP_DEBUG_LEVEL:-}" in
            none|basic|verbose)
              echo "HTTP_DEBUG_LEVEL=${HTTP_DEBUG_LEVEL}" >> $GITHUB_ENV ;;
            *)
              echo "HTTP_DEBUG_LEVEL=basic" >> $GITHUB_ENV ;;
          esac

      - name: Display manual trigger info
        run: |
          echo "🚀 Manual CI trigger initiated"
          echo "📝 Reason: ${{ inputs.reason || 'Manual testing' }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u)"

      - name: Set Build Info (job + run)
        id: set-build-info
        run: |
          BUILD_NAME="${{ github.event.repository.name }}-${{ github.job }}"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Set build variables
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          IMAGE_NAME="${REGISTRY_URL}/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-docker-internal-local/${SERVICE_NAME}:${IMAGE_TAG}"

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TESTS_PASSED=true" >> $GITHUB_ENV

      - name: Determine SemVer image version
        run: |
          set -euo pipefail
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "🔎 Resolving next SemVer for $APPLICATION_KEY"
          RESP_FILE=$(mktemp)
          HTTP_STATUS=$(curl -sS -L -o "$RESP_FILE" -w "%{http_code}" \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Accept: application/json")
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            if LATEST_VERSION=$(jq -er '.versions[0].version // empty' "$RESP_FILE" 2>/dev/null); then
              :
            else
              LATEST_VERSION=""
            fi
          else
            LATEST_VERSION=""
          fi
          rm -f "$RESP_FILE"
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
            APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          else
            APP_VERSION="1.0.0"
          fi
          # Update tags and build identifiers to SemVer
          IMAGE_TAG="$APP_VERSION"
          IMAGE_NAME="${REGISTRY_URL}/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-docker-internal-local/${SERVICE_NAME}:${IMAGE_TAG}"
          BUILD_NAME="$SERVICE_NAME"
          BUILD_NUMBER="$APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Determine SemVer image version
        id: set-app-version
        run: |
          set -euo pipefail
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          # Fallback minimal debug function (respects HTTP_DEBUG_LEVEL)
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              # Allow forcing header via env var, otherwise infer from URL
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "🔎 Resolving next SemVer for $APPLICATION_KEY"
          RESP_FILE=$(mktemp)
          HTTP_STATUS=$(curl -sS -L -o "$RESP_FILE" -w "%{http_code}" \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Accept: application/json")
          echo "🔢 Versions GET status: $HTTP_STATUS"
          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            DEBUG_INCLUDE_PROJECT_HEADER=true PROJECT_KEY='${{ vars.PROJECT_KEY }}' print_request_debug "GET" "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/"
          fi
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            # Attempt to parse JSON; if parsing fails, fall back
            if LATEST_VERSION=$(jq -er '.versions[0].version // empty' "$RESP_FILE" 2>/dev/null); then
              :
            else
              echo "⚠️ Non-JSON or unexpected response from versions API; falling back to 1.0.0"
              LATEST_VERSION=""
            fi
          else
            PROJECT_KEY='${{ vars.PROJECT_KEY }}' print_request_debug "GET" "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/"
            echo "⚠️ Versions API returned non-2xx. Body:"; cat "$RESP_FILE" || true
            LATEST_VERSION=""
          fi
          rm -f "$RESP_FILE"
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
            APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            echo "⬆️ Latest=$LATEST_VERSION → Next=$APP_VERSION"
          else
            APP_VERSION="1.0.0"
            echo "🆕 No previous version, starting at $APP_VERSION"
          fi
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          # Update image tag/name to use SemVer
          REGISTRY_URL=${REGISTRY_URL:-${{ vars.DOCKER_REGISTRY }}}
          IMAGE_TAG="$APP_VERSION"
          IMAGE_NAME="$REGISTRY_URL/${{ vars.PROJECT_KEY }}-$SERVICE_NAME-docker-internal-local/$SERVICE_NAME:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV

      - name: Finalize Build Info (repo_workflow_job / runNumber)
        id: finalize-build-info
        run: |
          # Build name: <repo>_<workflow>_<job>
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}"
          # Build number: <run-number>
          BUILD_NUMBER="${{ github.run_number }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ steps.set-build-info.outputs.build_name }}
          JFROG_CLI_BUILD_NUMBER: ${{ steps.set-build-info.outputs.build_number }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-inventory
          disable-job-summary: false
          disable-auto-build-publish: false
          disable-auto-evidence-collection: false
          oidc-audience: jfrog-github
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Diagnose Python dependency resolution
        run: |
          set -euo pipefail
          echo "🔎 Checking Artifactory connectivity and PyPI virtual repo"
          jf rt ping || true
          jf rt curl -XGET "/api/repositories/${{ vars.PROJECT_KEY }}-pypi-virtual" || true
          # Configure pip to use the virtual repo and disable prompts/version check
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          export PIP_DISABLE_PIP_VERSION_CHECK=1
          export PIP_NO_INPUT=1
          python -m pip --version
          python -m pip debug -v || true
          echo "🔎 Checking fastapi availability via virtual index"
          PIP_INDEX_URL="${{ vars.JFROG_URL }}/artifactory/api/pypi/${{ vars.PROJECT_KEY }}-pypi-virtual/simple"
          # Avoid interactive pip; probe with authenticated curl instead
          curl -fsSL -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" "$PIP_INDEX_URL/fastapi/" >/dev/null \
            && echo "✅ fastapi index accessible via virtual repo" \
            || echo "⚠️ Unable to access $PIP_INDEX_URL/fastapi/ (check repo and permissions)"

      - name: Collect Python dependencies for Build Info
        run: |
          python -m pip install --upgrade "pip<25"
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install -r requirements.txt; then
            echo "⚠️ jf pip install failed; falling back to public PyPI"
            pip install -r requirements.txt -i https://pypi.org/simple
          fi

      - name: Install test dependencies
        run: |
          set -euo pipefail
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install pytest pytest-cov httpx; then
            pip install -U pytest pytest-cov httpx -i https://pypi.org/simple
          fi

      - name: Run tests with coverage
        id: test-coverage
        run: |
          set -euo pipefail
          echo "🧪 Running tests with coverage"
          pytest --maxfail=1 --disable-warnings -q \
                 --cov=app --cov-report=xml:coverage.xml --cov-report=html:htmlcov
          echo "TESTS_PASSED=true" >> $GITHUB_ENV
          # Extract coverage percent from coverage.xml
          COV=$(python -c "import xml.etree.ElementTree as ET;root=ET.parse('coverage.xml').getroot();rate=float(root.get('line-rate') or 0.0);print(round(rate*100.0,1))")
          echo "COVERAGE_PERCENT=$COV" >> $GITHUB_ENV
          echo "coverage_percent=$COV" >> $GITHUB_OUTPUT

      - name: Build and push Docker image via JFrog CLI
        run: |
          set -euo pipefail
          echo ${{ secrets.JFROG_ADMIN_TOKEN }} | docker login "$REGISTRY_URL" -u yonatan --password-stdin
          jf docker build --pull -t "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER" .
          jf docker push "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          jf rt dp "$IMAGE_NAME" "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-docker-internal-local" --build-name="$BUILD_NAME" --build-number="$BUILD_NUMBER"
          echo "✅ Built and pushed Docker image (with build-info)"

      - name: Verify Docker image exists in Artifactory
        run: |
          set -euo pipefail
          REPO="${{ vars.PROJECT_KEY }}-$SERVICE_NAME-docker-internal-local"
          IMAGE="$SERVICE_NAME"
          TAG="$IMAGE_TAG"
          URL="${{ vars.JFROG_URL }}/artifactory/api/docker/${REPO}/v2/${IMAGE}/manifests/${TAG}"
          echo "🔎 Verifying image manifest: ${URL}"
          STATUS=$(curl -sS -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" "$URL")
          echo "HTTP $STATUS"
          if [[ "$STATUS" != "200" ]]; then
            echo "❌ Docker image manifest not found for ${REPO}/${IMAGE}:${TAG}" >&2
            exit 1
          fi
          echo "✅ Docker image present in Artifactory"

      # Evidence Plan: Package subject – unit-tests (pytest)
      - name: Attach coverage evidence to Docker image (pytest)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          echo "📊 Attaching pytest coverage evidence to Docker image"
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > coverage-evidence.json <<JSON
          {
            "framework": "pytest",
            "status": "PASSED",
            "coveragePercent": ${COVERAGE_PERCENT:-0},
            "generatedAt": "${NOW_TS}",
            "reports": ["coverage.xml", "htmlcov/index.html"]
          }
          JSON
          STATUS="PASSED"
          STATUS_EMOJI="✅"
          ANALYSIS_TEXT="Coverage is ${COVERAGE_PERCENT:-0}% with pytest. Aim to keep above 85%. Add tests for critical paths as needed."
          cat > coverage-evidence.md <<MD
          # Code Coverage Report: `pytest`

          > ## ${STATUS_EMOJI} Status: `${STATUS}`
          >
          > This report details the results of the automated code coverage checks.

          ---

          ## 📊 Key Metrics

          | Metric | Result |
          | :------------------ | :-------------------------------- |
          | **Code Coverage** | `${COVERAGE_PERCENT:-0}%` |
          | **Testing Framework** | `pytest` |

          ---

          ## 📝 Analysis & Recommendations

          > ${ANALYSIS_TEXT}

          **
          **
          **
          **

          ---

          ## 📄 Generated Report Artifacts

          *A detailed breakdown of the results can be found in the following files:*

          * `coverage.xml`
          * `htmlcov/index.html`

          ---
          <p align="right">⏰ Report Generated: <code>${NOW_TS}</code> (UTC)</p>
          MD
          KEY_ARGS=()
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY"); fi
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi
          jf evd create-evidence \
            --predicate coverage-evidence.json \
            --markdown coverage-evidence.md \
            --predicate-type "https://pytest.org/evidence/results/v1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-docker-internal-local" \
            --package-version "$IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ Coverage evidence attachment failed"

      # Evidence Plan: Package subject – sast-scan (Checkmarx)
      - name: Attach SAST evidence to Docker image (sast-scan)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "📎 Attaching SAST evidence to Docker image"
          cat > sast-evidence.json <<JSON
          {
            "sast": {
              "tool": "Checkmarx",
              "scanDate": "${NOW_TS}",
              "summary": {"critical": 0, "high": 0, "medium": 1, "low": 2},
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}"
            }
          }
          JSON
          cat > sast-evidence.md <<MD
          # 🛡️ SAST Security Scan Report: Checkmarx

          > ## ✅ Review Required
          >
          > The Checkmarx scan completed successfully, identifying **1 Medium** and **2 Low** severity findings. No Critical or High severity vulnerabilities were detected.

          ---

          ## Vulnerability Summary

          The following table breaks down the findings by severity level.

          | Severity | Count |
          | :------------- | :---: |
          | 🔴 **Critical** | 0 |
          | 🟠 **High** | 0 |
          | 🟡 **Medium** | 1 |
          | 🔵 **Low** | 2 |

          ---

          ## Scan Context

          * **SAST Tool**: `Checkmarx`
          * **Repository**: `${{ github.repository }}`
          * **Commit SHA**: `${{ github.sha }}`
          * **Scan Date (UTC)**: `${NOW_TS}`
          MD
          KEY_ARGS=()
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY"); fi
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi
          jf evd create-evidence \
            --predicate sast-evidence.json \
            --markdown sast-evidence.md \
            --predicate-type "https://checkmarx.com/evidence/sast/v1.1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-docker-internal-local" \
            --package-version "$IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ SAST evidence attachment failed"

      - name: Collect Git information for Build Info
        run: |
          jf rt bag "$BUILD_NAME" "$BUILD_NUMBER"

      - name: Collect Environment Variables for Build Info
        run: |
          jf rt bce "$BUILD_NAME" "$BUILD_NUMBER"

      - name: Publish Build Info
        run: |
          jf rt bp "$BUILD_NAME" "$BUILD_NUMBER"

      

      # Evidence Plan: Build subject – code-quality (SonarQube)
      - name: Attach Sonar quality gate to Build (code-quality)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > quality-gate.json <<JSON
          {
            "qualityGate": {
              "tool": "SonarQube",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          cat > quality-gate.md <<MD
          # SonarQube Quality Gate Report

          > ## ✅ Status: PASSED
          >
          > The project meets all quality requirements and has successfully passed the SonarQube quality gate.

          ---

          ## Gate Details

          * **Analysis Tool**: `SonarQube`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          MD
          KEY_ARGS=()
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY"); fi
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi
          jf evd create-evidence \
            --predicate quality-gate.json \
            --markdown quality-gate.md \
            --predicate-type "https://sonarsource.com/evidence/quality-gate/v1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ Quality gate evidence attachment failed"

      # Evidence Plan: Build subject – license-compliance (FOSSA)
      - name: Attach FOSSA license compliance to Build (license-compliance)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > license-evidence.json <<JSON
          {
            "licenseScan": {
              "tool": "FOSSA",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          cat > license-evidence.md <<MD
          # 🛡️ FOSSA License Compliance Report

          > ## ✅ Status: PASSED
          >
          > All software dependencies are in compliance with the project's license policies.

          ---

          ## Scan Details

          * **Compliance Tool**: `FOSSA`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          MD
          KEY_ARGS=()
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY"); fi
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi
          jf evd create-evidence \
            --predicate license-evidence.json \
            --markdown license-evidence.md \
            --predicate-type "https://fossa.com/evidence/license-scan/v2.1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ License compliance evidence attachment failed"

  create-application-version:
    needs: build-test-publish
    if: ${{ !inputs.verified_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      JFROG_CLI_SIGNING_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-inventory
          disable-job-summary: false
          disable-auto-build-publish: false
          disable-auto-evidence-collection: false
          oidc-audience: jfrog-github

      - name: Configure JFrog CLI
        run: |
          jf c add bookverse-admin --interactive=false --url "${{ vars.JFROG_URL }}" --access-token "${{ secrets.JFROG_ADMIN_TOKEN }}"
          jf c use bookverse-admin
          jf c show
      - name: Set AppTrust variables and determine version
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          APP_VERSION=${{ needs.build-test-publish.outputs.app_version }}
          IMAGE_TAG="${APP_VERSION}"
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          # Align build reference with build-test-publish job outputs
          BUILD_NAME="${{ needs.build-test-publish.outputs.build_name }}"
          BUILD_NUMBER="${{ needs.build-test-publish.outputs.build_number }}"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          
          echo "🔍 Checking for existing application versions..."
          
          if [[ -z "$APP_VERSION" || "$APP_VERSION" == "" ]]; then
            # Compute next SemVer if not provided by build job
          LATEST_VERSION=$(curl -s \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
              -H "Content-Type: application/json" | jq -r '.versions[0].version // empty')
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
              MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
              MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
              PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
              APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              echo "⬆️ Latest=$LATEST_VERSION → Next=$APP_VERSION"
            else
              APP_VERSION="1.0.0"
              echo "🆕 No existing versions found, starting at $APP_VERSION"
            fi
            IMAGE_TAG="$APP_VERSION"
          fi
          
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "COVERAGE_PERCENT=${{ needs.build-test-publish.outputs.coverage_percent }}" >> $GITHUB_ENV
          
          echo "✅ AppTrust variables set:"
          echo "   📦 Application: $APPLICATION_KEY"
          echo "   🏷️ Version: $APP_VERSION"
          echo "   🔨 Build: $SERVICE_NAME#$IMAGE_TAG"

      - name: Debug build info contents
        run: |
          set -euo pipefail
          echo "🔎 Fetching build info to confirm artifacts are present"
          URL="${{ vars.JFROG_URL }}/artifactory/api/build/$BUILD_NAME/$BUILD_NUMBER?project=${{ vars.PROJECT_KEY }}"
          echo "GET $URL"
          curl -sS -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" -H "Accept: application/json" "$URL" | jq '.buildInfo.modules // [] | map({id, artifacts: (.artifacts // [] | length)})'

      - name: Create application version
        run: |
          echo "🚀 Creating AppTrust application version: $APP_VERSION"
          
          # Determine application version tag - simulate real development environment
          # Array of realistic single tags for demo
          TAG_OPTIONS=(
            "release"
            "hotfix"
            "feature"
            "bugfix"
            "enhancement"
            "security"
            "performance"
            "refactor"
            "experimental"
            "maintenance"
            "integration"
            "documentation"
            "stable"
            "beta"
            "alpha"
            "critical"
            "patch"
            "minor"
            "major"
            "cleanup"
          )
          
          # Randomly select single tag based on run number for consistency
          TAG_INDEX=$((${{ github.run_number }} % ${#TAG_OPTIONS[@]}))
          APP_TAG="${TAG_OPTIONS[$TAG_INDEX]}"
          echo "🏷️ Application Version Tag (demo simulation): $APP_TAG"
          
          # Create application version with build sources
          APP_VERSION_PAYLOAD=$(cat << EOF
          {
            "version": "$APP_VERSION",
            "tag": "$APP_TAG",
            "sources": {
              "builds": [
                {
                  "name": "$BUILD_NAME",
                  "number": "$BUILD_NUMBER",
                  "repository_key": "$BUILD_INFO_REPO",
                  "include_dependencies": true
                }
              ]
            }
          }
          EOF
          )
          
          # Debug: show sanitized curl and payload
          echo "📦 Application Key: $APPLICATION_KEY"
          echo "📝 Payload:"; echo "$APP_VERSION_PAYLOAD" | jq . || echo "$APP_VERSION_PAYLOAD"
          # Source shared helper if available, with a robust fallback definition
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          echo "🔗 Curl (sanitized): curl -X POST '${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/?async=false' -H 'Authorization: Bearer ***' -H 'X-JFrog-Project: ${{ vars.PROJECT_KEY }}' -H 'Content-Type: application/json' -H 'Accept: application/json' -d '<payload>'"
          DEBUG_INCLUDE_PROJECT_HEADER=true PROJECT_KEY='${{ vars.PROJECT_KEY }}' print_request_debug "POST" "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/?async=false" "<payload>"

          # Create the application version with status/body capture
          RESP_BODY=$(mktemp)
          HTTP_STATUS=$(curl -sS -L -o "$RESP_BODY" -w "%{http_code}" -X POST \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/?async=false" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d "$APP_VERSION_PAYLOAD")
          echo "🔢 HTTP Status: $HTTP_STATUS"
          echo "📨 Response Body:"; cat "$RESP_BODY"; echo
          rm -f "$RESP_BODY"
          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            echo "❌ Failed to create application version" >&2
            exit 1
          fi
          
          echo "✅ Application version created: $APPLICATION_KEY@$APP_VERSION"
          echo "📦 Packages will be automatically bound from build sources"

      # Evidence Plan: App UNASSIGNED – slsa-provenance and jira-tickets (gate to DEV)
      - name: Attach UNASSIGNED evidence (SLSA, Jira)
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          KEY_ARGS=()
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY"); fi
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi

          # SLSA Provenance
          cat > slsa.json <<JSON
          {
            "provenance": {
              "framework": "SLSA",
              "level": "v1",
              "generatedAt": "${NOW_TS}",
              "attachStage": "UNASSIGNED",
              "gateForPromotionTo": "DEV"
            }
          }
          JSON
          cat > slsa.md <<MD
          # SLSA Provenance Report 🛡️

          This document summarizes the SLSA (Supply-chain Levels for Software Artifacts) provenance check. This evidence serves as a quality and security gate for promoting an artifact to the `DEV` environment.

          ---

          ## Evidence Details

          * **Framework**: `SLSA`
          * **SLSA Level**: `v1`
          * **Generated At**: `${NOW_TS}`
          * **Gate for Promotion To**: `DEV`
          * **Attachment Stage**: `UNASSIGNED`
          MD
          jf evd create-evidence \
            --predicate slsa.json \
            --markdown slsa.md \
            --predicate-type "https://slsa.dev/provenance/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ SLSA evidence attach failed"

          # Jira Tickets
          cat > jira.json <<JSON
          {
            "jira": {
              "tickets": ["BV-${{ github.run_number }}"],
              "status": "ready",
              "attachStage": "UNASSIGNED",
              "gateForPromotionTo": "DEV"
            }
          }
          JSON
          cat > jira.md <<MD
          # 🎫 Jira Validation Gate Report

          > ## ✅ Gate Passed
          >
          > The associated Jira ticket has been verified and is in the correct `ready` state. This satisfies the promotion criteria for the **DEV** environment.

          ---

          ## Gate Details

          * **Integration**: `Jira`
          * **Ticket(s) Verified**: `BV-${{ github.run_number }}`
          * **Required Status**: `ready`
          * **Promotion Gate For**: `DEV`
          * **Attachment Stage**: `UNASSIGNED`
          MD
          jf evd create-evidence \
            --predicate jira.json \
            --markdown jira.md \
            --predicate-type "https://atlassian.com/evidence/jira/release/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}" || echo "⚠️ Jira evidence attach failed"

      - name: Add build evidence
        run: |
          echo "🛡️ Complete evidence summary for AppTrust application version"
          echo "📋 Evidence Summary:"
          echo "   🐳 Artifacts: Docker container image with attached evidence"
          echo "   📊 Coverage Evidence: ${COVERAGE_PERCENT:-N/A}% (pytest) attached to image"
          echo "   🔨 Build: $SERVICE_NAME#$IMAGE_TAG"
          echo "   🏷️ Version: $APP_VERSION (SemVer compliant)"
          echo "   📅 Created: $(date -u)"
          echo "   👤 Developer: ${{ github.actor }}"
          echo "   👨‍💼 Reviewer: tech-lead-$(echo ${{ github.actor }} | head -c3)"
          echo "   🔗 Commit: ${{ github.sha }}"
          echo ""
          echo "✅ Complete evidence trail documented and attached"

      - name: Generate AppTrust summary
        run: |
          echo "## 🎯 AppTrust Integration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Evidence Plan: see bookverse-demo-init/docs/EVIDENCE_PLAN.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** \`$APPLICATION_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** \`$SERVICE_NAME#$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Automatically Bound Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Build Artifacts**: All artifacts from build \`$SERVICE_NAME#$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Docker Image**: Container image with automatic SBOMs and signatures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Evidence Attached to Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Test Coverage Evidence** (Docker Image): pytest results (coverage ${COVERAGE_PERCENT:-N/A}%)" >> $GITHUB_STEP_SUMMARY
          echo "  - Reports: coverage.xml, HTML coverage report" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Build Provenance**: Git commit, trigger source, and build metadata" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 AppTrust application version ready for promotion and governance!**" >> $GITHUB_STEP_SUMMARY

  attach-verified-only:
    if: ${{ inputs.verified_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve application and version (latest)
        run: |
          set -euo pipefail
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "🔎 Fetching latest application version for $APPLICATION_KEY"
          RESP_FILE=$(mktemp)
          HTTP_STATUS=$(curl -sS -L -o "$RESP_FILE" -w "%{http_code}" \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" \
            -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            -H "Accept: application/json")
          if [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 300 ]]; then
            if LATEST_VERSION=$(jq -er '.versions[0].version // empty' "$RESP_FILE" 2>/dev/null); then
              APP_VERSION="$LATEST_VERSION"
            fi
          fi
          rm -f "$RESP_FILE"
          if [ -z "${APP_VERSION:-}" ]; then
            echo "❌ Could not determine latest application version for $APPLICATION_KEY" >&2
            exit 1
          fi
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "🎯 Target application: $APPLICATION_KEY"
          echo "🏷️ Target version: $APP_VERSION"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-inventory
          disable-job-summary: true
          oidc-audience: jfrog-github

      - name: Attach verified evidence to latest version
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          KEY_ARGS=()
          ALIAS="${EVIDENCE_KEY_ALIAS:-${EVIDENCE_KEY_ALIAS_VAR:-}}"
          if [[ -n "${EVIDENCE_PRIVATE_KEY:-}" ]]; then
            KEY_ARGS+=(--key "$EVIDENCE_PRIVATE_KEY")
            if [[ -n "$ALIAS" ]]; then KEY_ARGS+=(--key-alias "$ALIAS"); fi
          fi

          cat > verified.json <<JSON
          {
            "verification": {
              "status": "verified",
              "verifiedAt": "${NOW_TS}",
              "note": "Manual verification for demo purposes"
            }
          }
          JSON

          cat > verified.md <<MD
          # ✅ Verification Evidence

          > Status: verified  
          > Verified At: ${NOW_TS}

          Minimal verification evidence attached to the latest application version for demonstration.
          MD

          echo "🔐 Signing args: ${KEY_ARGS[*]:-<none>}"
          set +e
          jf evd create-evidence \
            --predicate verified.json \
            --markdown verified.md \
            --predicate-type "https://bookverse.demo/evidence/verification/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            "${KEY_ARGS[@]}"
          RC=$?
          set -e
          if [[ $RC -eq 0 ]]; then
            echo "✅ Verified evidence attached to $APPLICATION_KEY@$APP_VERSION"
            echo "   Predicate type: https://bookverse.demo/evidence/verification/v1"
            echo "   Predicate file: verified.json"
            echo "   Markdown file: verified.md"
          else
            echo "❌ Verified evidence attachment failed for $APPLICATION_KEY@$APP_VERSION (exit $RC)" >&2
            exit $RC
          fi
