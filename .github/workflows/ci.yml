name: CI

# NOTE: Manual trigger only during development phase
# Will be changed to automatic triggers (push/PR) when demo is ready
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing'
        type: string

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Display manual trigger info
        run: |
          echo "🚀 Manual CI trigger initiated"
          echo "📝 Reason: ${{ inputs.reason || 'Manual testing' }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u)"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI
        run: |
          jf c add --interactive=false --url "${{ vars.JFROG_URL }}" --access-token ""
          jf c show

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure JFrog pip integration
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          jf pipc --repo-resolve=${{ vars.PROJECT_KEY }}-pypi-virtual
          echo "✅ Configured JFrog pip integration with repository: ${{ vars.PROJECT_KEY }}-pypi-virtual"

      - name: Install build dependencies via JFrog CLI
        run: |
          python -m pip install --upgrade pip
          jf pip install build twine pytest pytest-cov httpx
          echo "✅ Installed build dependencies via JFrog CLI"

      - name: Install project dependencies via JFrog CLI
        run: |
          jf pip install -r requirements.txt
          echo "✅ Installed project dependencies via JFrog CLI"

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
          
      - name: Set build variables
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||' | sed 's|http://||')
          IMAGE_NAME="$REGISTRY_URL/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-docker-internal-local/${SERVICE_NAME}:${IMAGE_TAG}"
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "BUILD_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Python packages via JFrog CLI
        run: |
          python -m build
          jf rt upload "dist/*.whl" "${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-python-internal-local/" \
            --build-name="${{ env.BUILD_NAME }}" --build-number="${{ env.BUILD_NUMBER }}"
          jf rt upload "dist/*.tar.gz" "${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-python-internal-local/" \
            --build-name="${{ env.BUILD_NAME }}" --build-number="${{ env.BUILD_NUMBER }}"
          echo "✅ Built and uploaded Python packages via JFrog CLI"

      - name: Build and push Docker image via JFrog CLI
        run: |
          jf docker build --pull -t ${{ env.IMAGE_NAME }} .
          jf rt dp ${{ env.IMAGE_NAME }} ${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-docker-internal-local \
            --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}
          echo "✅ Built and pushed Docker image via JFrog CLI"

      - name: Upload test results
        run: |
          jf rt upload "coverage.xml" "${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-generic-internal-local/reports/" \
            --build-name="${{ env.BUILD_NAME }}" --build-number="${{ env.BUILD_NUMBER }}" || echo "No coverage report found"
          jf rt upload "htmlcov/**" "${{ vars.PROJECT_KEY }}-${{ env.SERVICE_NAME }}-generic-internal-local/reports/coverage/" \
            --build-name="${{ env.BUILD_NAME }}" --build-number="${{ env.BUILD_NUMBER }}" || echo "No HTML coverage found"
          echo "✅ Uploaded test results via JFrog CLI"


