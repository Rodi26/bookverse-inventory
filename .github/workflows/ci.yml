name: CI

# NOTE: Manual trigger only during development phase
# Will be changed to automatic triggers (push/PR) when demo is ready
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing'
        type: string
      verified_only:
        description: 'Skip application version creation (verified packages only)'
        required: false
        default: false
        type: boolean


jobs:
  build-test-publish:
    name: CI
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    outputs:
      build_name: ${{ steps.set-build-info.outputs.build_name }}
      build_number: ${{ steps.set-build-info.outputs.build_number }}
      app_version: ${{ steps.set-app-version.outputs.app_version }}
      image_tag: ${{ steps.set-app-version.outputs.image_tag }}
      coverage_percent: ${{ steps.test-coverage.outputs.coverage_percent }}
      docker_build_push_status: ${{ steps.export-status-outputs.outputs.docker_build_push_status }}
      build_info_publish_status: ${{ steps.export-status-outputs.outputs.build_info_publish_status }}
      coverage_evidence_status: ${{ steps.export-status-outputs.outputs.coverage_evidence_status }}
      sast_evidence_status: ${{ steps.export-status-outputs.outputs.sast_evidence_status }}
      quality_evidence_status: ${{ steps.export-status-outputs.outputs.quality_evidence_status }}
      license_evidence_status: ${{ steps.export-status-outputs.outputs.license_evidence_status }}


    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Info] Manual trigger"
        run: |
          echo "🚀 Manual CI trigger initiated"
          echo "📝 Reason: ${{ inputs.reason }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u)"

      - name: "[Setup] Build Info"
        id: set-build-info
        run: |
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: "[Setup] Build variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          DOCKER_REPO="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local"
          IMAGE_NAME_PATH="${REGISTRY_URL}/${DOCKER_REPO}/${SERVICE_NAME}:${IMAGE_TAG}"
          IMAGE_NAME_SUBDOMAIN="${DOCKER_REPO}.${REGISTRY_URL}/${SERVICE_NAME}:${IMAGE_TAG}"
          IMAGE_NAME="$IMAGE_NAME_PATH"

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME_PATH=$IMAGE_NAME_PATH" >> $GITHUB_ENV
          echo "IMAGE_NAME_SUBDOMAIN=$IMAGE_NAME_SUBDOMAIN" >> $GITHUB_ENV
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV
          echo "TESTS_PASSED=true" >> $GITHUB_ENV

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          oidc-audience: ${{ vars.JFROG_URL }}
          disable-job-summary: true
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ steps.set-build-info.outputs.build_name }}
          JFROG_CLI_BUILD_NUMBER: ${{ steps.set-build-info.outputs.build_number }}
          JFROG_CLI_BUILD_PROJECT: ${{ vars.PROJECT_KEY }}
          
      - name: "[Setup] Verify JFrog Authentication"
        run: |
          echo "🔐 Verifying JFrog CLI authentication and connectivity..."
          jf rt ping
          echo "✅ JFrog authentication successful"

      - name: "[Auth] Exchange OIDC and persist JF access token"
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          PROJECT: ${{ vars.PROJECT_KEY }}
          PROVIDER_NAME: bookverse-inventory-github
        run: |
          set -euo pipefail
          # Ensure jq
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          # 1) Get GitHub OIDC ID token (audience -> JFrog URL)
          if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
            echo "❌ Missing GitHub OIDC request env vars" >&2; exit 1; fi
          GH_ID_TOKEN=$(curl -sS -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${JF_URL}" | jq -r .value)
          if [[ -z "$GH_ID_TOKEN" || "$GH_ID_TOKEN" == "null" ]]; then echo "❌ Failed to fetch GitHub ID token" >&2; exit 1; fi
          # 2) Exchange at JFrog Access for access token
          PAYLOAD=$(jq -n --arg jwt "$GH_ID_TOKEN" \
            --arg provider_name "$PROVIDER_NAME" \
            --arg project_key "$PROJECT" \
            --arg job_id "${{ github.job }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg repo "https://github.com/${{ github.repository }}" \
            --arg revision "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            '{
              grant_type:"urn:ietf:params:oauth:grant-type:token-exchange",
              subject_token_type:"urn:ietf:params:oauth:token-type:id_token",
              subject_token:$jwt,
              provider_name:$provider_name,
              project_key:$project_key,
              job_id:$job_id,
              run_id:$run_id,
              repo:$repo,
              revision:$revision,
              branch:$branch
            }')
          TOKEN=$(curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$JF_URL/access/api/v1/oidc/token" | jq -r .access_token)
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then echo "❌ Failed to exchange OIDC token" >&2; exit 1; fi
          # Persist access token for later steps (TTL ~60m)
          echo "JF_ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV
          # 3) Docker login to the registry using access token
          # Derive username from token payload (sub/username), fallback to oauth2_access_token
          b64pad() { local l=${#1}; local m=$((l % 4)); if [ $m -eq 2 ]; then echo "$1=="; elif [ $m -eq 3 ]; then echo "$1="; else echo "$1"; fi; }
          PAY=$(echo "$TOKEN" | cut -d. -f2 || true)
          PAY_PAD=$(b64pad "$PAY")
          CLAIMS=$(echo "$PAY_PAD" | tr '_-' '/+' | base64 -d 2>/dev/null || true)
          DOCKER_USER=$(echo "$CLAIMS" | jq -r '.username // .sub // .subject // empty' 2>/dev/null || true)
          # If sub is in the form jfac@.../users/<username>, extract the trailing <username>
          if [[ "$DOCKER_USER" == *"/users/"* ]]; then
            DOCKER_USER=${DOCKER_USER##*/users/}
          fi
          if [[ -z "$DOCKER_USER" || "$DOCKER_USER" == "null" ]]; then DOCKER_USER="oauth2_access_token"; fi
          echo "Using docker username: $DOCKER_USER"
          echo "$TOKEN" | docker login "$REGISTRY_URL" -u "$DOCKER_USER" --password-stdin

      - name: "[Setup] Determine SemVer"
        id: set-app-version
        run: |
          set -euo pipefail
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          REGISTRY_URL=${REGISTRY_URL:-${{ vars.DOCKER_REGISTRY }}}
          REPO_KEY="${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local"

          # Locate local version map for seed versions
          VMAP_PATH="./config/version-map.yaml"
          if [[ ! -f "$VMAP_PATH" && -f "./.github/version-map.yaml" ]]; then VMAP_PATH="./.github/version-map.yaml"; fi
          if [[ -f "$VMAP_PATH" ]]; then
            echo "📄 Using local version map: $VMAP_PATH"
          else
            echo "ℹ️ No local version map found; will rely on existing versions or fallback seeds"
          fi

          echo "🔎 Resolving next Application SemVer for $APPLICATION_KEY (SemVer sort)"
          APP_RESP=$(curl -sS -L -X GET "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=200" \
            -H "Authorization: Bearer $JF_ACCESS_TOKEN" \
            -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
            -H "Accept: application/json" 2>/dev/null || echo '{"error":"curl_failed"}')
          if ! echo "$APP_RESP" | jq -e . >/dev/null 2>&1; then
            APP_LATEST=""
            echo "⚠️ versions API did not return valid JSON. First 200 chars:" && printf '%s' "$APP_RESP" | head -c 200 || true; echo
          else
            # Take all versions, strip any pre-release suffix, keep strict X.Y.Z, sort numerically and pick last
            PARSED=$(echo "$APP_RESP" | jq -r '[.versions[]?.version? | gsub("-.*$"; "") | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))]')
            COUNT=$(printf '%s' "$PARSED" | jq 'length' 2>/dev/null || echo 0)
            SORTED=$(printf '%s' "$PARSED" | jq -r 'unique | sort_by([ (split(".")[0]|tonumber),(split(".")[1]|tonumber),(split(".")[2]|tonumber) ])')
            if [ "${COUNT:-0}" -gt 0 ]; then
              echo "📚 Found $COUNT existing versions"
            else
              echo "📚 No existing versions found"
            fi
            APP_LATEST=$(printf '%s' "$SORTED" | jq -r '(last // empty)' 2>/dev/null || echo "")
          fi
          if [[ -n "${APP_LATEST}" ]]; then
            IFS='.' read -r A_MAJ A_MIN A_PAT <<<"${APP_LATEST}"; A_PAT=$((A_PAT+1)); APP_VERSION="${A_MAJ}.${A_MIN}.${A_PAT}"
            echo "🧮 Latest parsed version: ${APP_LATEST}; ⬆️ next: ${APP_VERSION}"
          else
            # Use seed version from local version map
            APP_SEED=$(awk -v key="$APPLICATION_KEY" '
              BEGIN { found_key=0; in_seeds=0 }
              /^  - key:/ { found_key = ($3 == key); in_seeds=0; next }
              found_key && /^    seeds:/ { in_seeds=1; next }
              found_key && in_seeds && /^[[:space:]]+application:[[:space:]]*/ {
                sub(/^[ \t]+application:[ \t]*/, "");
                print; exit
              }
            ' "$VMAP_PATH" 2>/dev/null || echo "")
            # Bump the seed version's patch to avoid repeats when previous runs used the same seed
            IFS='.' read -r S_MAJ S_MIN S_PAT <<<"${APP_SEED}"; S_PAT=$((S_PAT+1)); APP_VERSION="${S_MAJ}.${S_MIN}.${S_PAT}"
            echo "🌱 Using seed from version-map.yaml: $APP_SEED; ⬆️ bumped to: $APP_VERSION"
          fi
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT

          echo "🔎 Resolving next Image SemVer for docker:$REPO_KEY/$SERVICE_NAME (SemVer sort)"
          IMG_RESP=$(curl -sS -L -X GET "${{ vars.JFROG_URL }}/v2/$REPO_KEY/$SERVICE_NAME/tags/list" \
            -H "Authorization: Bearer $JF_ACCESS_TOKEN" \
            -H "Accept: application/json" 2>/dev/null || echo '{"error":"curl_failed"}')
          if ! echo "$IMG_RESP" | jq -e . >/dev/null 2>&1; then
            IMG_LATEST=""
          else
            IMG_LATEST=$(echo "$IMG_RESP" | jq -r '[.tags[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))] | sort_by([ (split(".")[0]|tonumber),(split(".")[1]|tonumber),(split(".")[2]|tonumber) ]) | (last // empty)')
          fi
          if [[ -n "${IMG_LATEST}" ]]; then
            IFS='.' read -r I_MAJ I_MIN I_PAT <<<"${IMG_LATEST}"; I_PAT=$((I_PAT+1)); IMAGE_TAG="${I_MAJ}.${I_MIN}.${I_PAT}"
          else
            # Use seed version from local version map
            IMG_SEED=$(awk -v app_key="$APPLICATION_KEY" '
              BEGIN { found_app=0; in_packages=0; is_docker=0 }
              /^  - key:/ { found_app = ($3 == app_key); in_packages=0; is_docker=0; next }
              found_app && /^    packages:/ { in_packages=1; is_docker=0; next }
              found_app && in_packages && /^      - type:[ \t]*docker/ { is_docker=1; next }
              found_app && in_packages && is_docker && /^[[:space:]]+seed:[ \t]*/ {
                sub(/^[ \t]+seed:[ \t]*/, "");
                print; exit
              }
            ' "$VMAP_PATH" 2>/dev/null || echo "")
            IMAGE_TAG="$IMG_SEED"
            echo "✅ Using package seed version from version-map.yaml: $IMAGE_TAG"
          fi

          IMAGE_NAME_PATH="$REGISTRY_URL/$REPO_KEY/$SERVICE_NAME:$IMAGE_TAG"
          IMAGE_NAME="$IMAGE_NAME_PATH"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV


      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Diag] Python deps"
        run: |
          set -euo pipefail
          echo "🔎 Checking Artifactory connectivity and PyPI virtual repo"
          jf rt ping || true
          curl -sS -L -X GET "${{ vars.JFROG_URL }}/api/repositories/${{ vars.PROJECT_KEY }}-pypi-virtual" \
            -H "Authorization: Bearer $JF_ACCESS_TOKEN" \
            -H "Accept: application/json" || true
          # Configure pip to use the virtual repo and disable prompts/version check
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          export PIP_DISABLE_PIP_VERSION_CHECK=1
          export PIP_NO_INPUT=1
          python -m pip --version
          python -m pip debug -v || true
          echo "🔎 Checking fastapi availability via virtual index"
          PIP_INDEX_URL="${{ vars.JFROG_URL }}/artifactory/api/pypi/${{ vars.PROJECT_KEY }}-pypi-virtual/simple"
          # Avoid interactive pip; probe with authenticated jfrog CLI instead
          curl -sS -L -X GET "${{ vars.JFROG_URL }}/api/pypi/${{ vars.PROJECT_KEY }}-pypi-virtual/simple/fastapi/" \
            -H "Authorization: Bearer $JF_ACCESS_TOKEN" >/dev/null 2>&1 \
            && echo "✅ fastapi index accessible via virtual repo" \
            || echo "⚠️ Unable to access $PIP_INDEX_URL/fastapi/ (check repo and permissions)"

      - name: "[Build Info] Collect Python deps"
        run: |
          python -m pip install --upgrade "pip<25"
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install -r requirements.txt; then
            echo "⚠️ jf pip install failed; falling back to public PyPI"
            pip install -r requirements.txt -i https://pypi.org/simple
          fi

      - name: "[Test] Install deps"
        run: |
          set -euo pipefail
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install pytest pytest-cov httpx; then
            pip install -U pytest pytest-cov httpx -i https://pypi.org/simple
          fi

      - name: "[Test] Run with coverage"
        id: test-coverage
        run: |
          set -euo pipefail
          echo "🧪 Running tests with coverage"
          pytest --maxfail=1 --disable-warnings -q \
                 --cov=app --cov-report=xml:coverage.xml --cov-report=html:htmlcov
          echo "TESTS_PASSED=true" >> $GITHUB_ENV
          # Extract coverage percent from coverage.xml
          COV=$(python -c "import xml.etree.ElementTree as ET;root=ET.parse('coverage.xml').getroot();rate=float(root.get('line-rate') or 0.0);print(round(rate*100.0,1))")
          echo "COVERAGE_PERCENT=$COV" >> $GITHUB_ENV
          echo "coverage_percent=$COV" >> $GITHUB_OUTPUT

      - name: "[Build] API image"
        run: |
          set -euo pipefail
          # Use JFrog CLI to authenticate pushes without requiring docker login
          SERVER_ID="${SETUP_JFROG_CLI_SERVER_IDS:-setup-jfrog-cli-server}"
          jf c use "$SERVER_ID" || true
          # Ensure project header is sent for OIDC-based commands like `jf docker`
          export JF_PROJECT="${{ vars.PROJECT_KEY }}"
          # Also set build project explicitly for JFrog CLI commands
          export JFROG_CLI_BUILD_PROJECT="${{ vars.PROJECT_KEY }}"

          # Using OIDC-based server configuration from setup action; no admin token required
          # Use precomputed IMAGE_TAG/IMAGE_NAME from set-app-version step to avoid drift
          REPO_KEY="${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local"
          if [[ -z "${IMAGE_NAME:-}" ]]; then
            IMAGE_NAME="$REGISTRY_URL/$REPO_KEY/$SERVICE_NAME:$IMAGE_TAG"
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          fi
          echo "Using precomputed image tag: $IMAGE_TAG"

          # Build and push (plain docker) using subdomain host; then create build-info
          jf docker build --pull -t "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER" .
          docker push "$IMAGE_NAME"

          # Build-info will be published in a later step via bag/bce/bp

          echo "DOCKER_BUILD_PUSH_STATUS=SUCCESS" >> $GITHUB_ENV
          echo "✅ Built and pushed Docker image (OIDC docker push + build-info)"

      # Rely on Build Info as the source of truth; explicit registry checks removed

      # Evidence Plan: Package subject – unit-tests (pytest)
      - name: "[Evidence] Prepare coverage template"
        run: |
          set -euo pipefail
          echo "📄 Preparing pytest coverage evidence template"
          # Create a literal template to avoid shell expansion
          cat > coverage-evidence.template.md <<'EOF'
          # Code Coverage Report: `pytest`

          > ${STATUS_EMOJI} Status: ${STATUS}

          This report details the results of the automated code coverage checks.

          ---

          ## 📊 Key Metrics

          | Metric | Result |
          | :------------------ | :-------------------------------- |
          | **Code Coverage** | `${COVERAGE_PERCENT}%` |
          | **Testing Framework** | `pytest` |

          ---

          ## 📝 Analysis & Recommendations

          ${ANALYSIS_TEXT}

          ---

          ## 📄 Generated Report Artifacts

          *A detailed breakdown of the results can be found in the following files:*

          * `coverage.xml`
          * `htmlcov/index.html`

          ---
          <p align="right">⏰ Report Generated: <code>${NOW_TS}</code> (UTC)</p>
          EOF

      - name: "[Evidence] Attach coverage"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          # Ensure envsubst is available
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          # Prepare predicate JSON using the same timestamp used in markdown
          cat > coverage-evidence.json <<JSON
          {
            "framework": "pytest",
            "status": "PASSED",
            "coveragePercent": ${COVERAGE_PERCENT:-0},
            "generatedAt": "${NOW_TS}",
            "reports": ["coverage.xml", "htmlcov/index.html"]
          }
          JSON
          # Export variables for envsubst
          export STATUS="PASSED"
          export STATUS_EMOJI="✅"
          export COVERAGE_PERCENT="${COVERAGE_PERCENT:-0}"
          export NOW_TS="${NOW_TS}"
          export ANALYSIS_TEXT="Coverage is ${COVERAGE_PERCENT:-0}% with pytest. Aim to keep above 85%. Add tests for critical paths as needed."
          # Render the template
          envsubst < coverage-evidence.template.md > coverage-evidence.md
          # Attach evidence
          if jf evd create-evidence \
            --predicate coverage-evidence.json \
            --markdown coverage-evidence.md \
            --predicate-type "https://pytest.org/evidence/results/v1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local" \
            --package-version "$IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "COVERAGE_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "COVERAGE_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "⚠️ Coverage evidence attachment failed"
          fi

      # Evidence Plan: Package subject – sast-scan (Checkmarx)
      - name: "[Evidence] Prepare SAST template"
        run: |
          set -euo pipefail
          echo "📄 Preparing SAST evidence template"
          cat > sast-evidence.template.md <<'EOF'
          ### 🛡️ Checkmarx SAST Scan Summary

          | Status | Details |
          | :--- | :--- |
          | ✅ Review Required | No Critical or High severity issues were found. A manual review is recommended. |

          ---

          ## Vulnerability Summary

          The following table breaks down the findings by severity level.

          | Severity | Count |
          | :------------- | :---: |
          | 🔴 **Critical** | 0 |
          | 🟠 **High** | 0 |
          | 🟡 **Medium** | 1 |
          | 🔵 **Low** | 2 |

          ---

          ## Scan Context

          * **SAST Tool**: `Checkmarx`
          * **Repository**: `${{ github.repository }}`
          * **Commit SHA**: `${{ github.sha }}`
          * **Scan Date (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach SAST"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          # Create predicate JSON
          cat > sast-evidence.json <<JSON
          {
            "sast": {
              "tool": "Checkmarx",
              "scanDate": "${NOW_TS}",
              "summary": {"critical": 0, "high": 0, "medium": 1, "low": 2},
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < sast-evidence.template.md > sast-evidence.md
          if jf evd create-evidence \
            --predicate sast-evidence.json \
            --markdown sast-evidence.md \
            --predicate-type "https://checkmarx.com/evidence/sast/v1.1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local" \
            --package-version "$IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "SAST_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "SAST_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "⚠️ SAST evidence attachment failed"
          fi

      - name: "[Build Info] Publish"
        env:
          JFROG_CLI_LOG_LEVEL: DEBUG
        run: |
          set -euo pipefail
          # Ensure jq
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          # Use persisted access token from earlier step
          export JF_URL='${{ vars.JFROG_URL }}'
          if [[ -z "${JF_ACCESS_TOKEN:-}" ]]; then
            echo "❌ Missing JF_ACCESS_TOKEN in environment. Ensure earlier auth step persisted it." >&2; exit 1; fi
          export JF_PROJECT='${{ vars.PROJECT_KEY }}'
          # Add and use a temp server tied to this access token
          TMP_SERVER_ID="ci-token-server"
          jf c add "$TMP_SERVER_ID" --interactive=false --overwrite=true --url "$JF_URL" --access-token "$JF_ACCESS_TOKEN"
          jf c use "$TMP_SERVER_ID"
          echo "Using JFrog server(s):" && jf c show || true
          # Associate the pushed Docker image with the build-info before publishing
          REPO_KEY="${DOCKER_REPO:-${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local}"
          echo "🔗 Adding docker image to build-info: image=$IMAGE_NAME repo=$REPO_KEY"
          # Resolve pushed image digest and write in required format: image:tag@sha256:...
          DIGEST=$(docker inspect "$IMAGE_NAME" --format='{{index .RepoDigests 0}}' 2>/dev/null | awk -F@ '{print $2}')
          if [[ -z "$DIGEST" || "$DIGEST" == "<no value>" ]]; then
            docker pull "$IMAGE_NAME" >/dev/null 2>&1 || true
            DIGEST=$(docker inspect "$IMAGE_NAME" --format='{{index .RepoDigests 0}}' 2>/dev/null | awk -F@ '{print $2}')
          fi
          if [[ -z "$DIGEST" || "$DIGEST" == "<no value>" ]]; then
            echo "❌ Could not resolve image digest for $IMAGE_NAME" >&2; exit 1
          fi
          echo "${IMAGE_NAME%@*}@${DIGEST}" > images.txt
          jf rt build-docker-create "$REPO_KEY" \
            --image-file images.txt \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}"
          if jf rt bag --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER" \
             && jf rt bce --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER" \
             && jf rt bp  --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER"; then
            echo "BUILD_INFO_PUBLISH_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "BUILD_INFO_PUBLISH_STATUS=FAILED" >> $GITHUB_ENV
            exit 1
          fi

      # Evidence Plan: Build subject – code-quality (SonarQube)
      - name: "[Evidence] Prepare quality gate"
        run: |
          set -euo pipefail
          echo "📄 Preparing quality gate template"
          cat > quality-gate.template.md <<'EOF'
          # SonarQube Quality Gate Report

          > ✅ Status: PASSED

          The project meets all quality requirements and has successfully passed the SonarQube quality gate.

          ---

          ## Gate Details

          * **Analysis Tool**: `SonarQube`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach quality gate"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > quality-gate.json <<JSON
          {
            "qualityGate": {
              "tool": "SonarQube",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < quality-gate.template.md > quality-gate.md
          if jf evd create-evidence \
            --predicate quality-gate.json \
            --markdown quality-gate.md \
            --predicate-type "https://sonarsource.com/evidence/quality-gate/v1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "QUALITY_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "QUALITY_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "⚠️ Quality gate evidence attachment failed"
          fi

      # Evidence Plan: Build subject – license-compliance (FOSSA)
      - name: "[Evidence] Prepare license template"
        run: |
          set -euo pipefail
          echo "📄 Preparing license compliance template"
          cat > license-evidence.template.md <<'EOF'
          # 🛡️ FOSSA License Compliance Report

          > ✅ Status: PASSED

          All software dependencies are in compliance with the project's license policies.

          ---

          ## Scan Details

          * **Compliance Tool**: `FOSSA`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach license compliance"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > license-evidence.json <<JSON
          {
            "licenseScan": {
              "tool": "FOSSA",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < license-evidence.template.md > license-evidence.md
          if jf evd create-evidence \
            --predicate license-evidence.json \
            --markdown license-evidence.md \
            --predicate-type "https://fossa.com/evidence/license-scan/v2.1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "LICENSE_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "LICENSE_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "⚠️ License compliance evidence attachment failed"
          fi

      - name: "[Evidence] Export statuses"
        id: export-status-outputs
        run: |
          echo "docker_build_push_status=${DOCKER_BUILD_PUSH_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "build_info_publish_status=${BUILD_INFO_PUBLISH_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "coverage_evidence_status=${COVERAGE_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "sast_evidence_status=${SAST_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "quality_evidence_status=${QUALITY_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "license_evidence_status=${LICENSE_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT

  create-application-version:
    needs: build-test-publish
    if: ${{ !inputs.verified_only }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write

    env:
      JFROG_CLI_SIGNING_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}

    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] JFrog CLI"
        # Temporary workaround: using forked action until upstream fix
        # uses: jfrog/setup-jfrog-cli@v4
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          oidc-audience: ${{ vars.JFROG_URL }}
          disable-job-summary: true
          disable-auto-build-publish: true
          disable-auto-evidence-collection: false
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      - name: "[Setup] JFrog config"
        run: |
          # Use the server configured by setup-jfrog-cli with OIDC
          jf c show || true
      - name: "[Setup] AppTrust variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          APP_VERSION=${{ needs.build-test-publish.outputs.app_version }}
          IMAGE_TAG=${{ needs.build-test-publish.outputs.image_tag }}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          # Recompute canonical build reference for the build job
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_build-test-publish"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          
          if [[ -z "$APP_VERSION" || -z "$IMAGE_TAG" ]]; then
            echo "❌ Missing APP_VERSION or IMAGE_TAG from build-test-publish outputs" >&2
            exit 1
          fi
          
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "COVERAGE_PERCENT=${{ needs.build-test-publish.outputs.coverage_percent }}" >> $GITHUB_ENV
          
          echo "✅ AppTrust variables set:"
          echo "   📦 Application: $APPLICATION_KEY"
          echo "   🏷️ Version: $APP_VERSION"
          echo "   🔨 Build: $SERVICE_NAME#$IMAGE_TAG"


      - name: "[Auth] Persist JF access token (OIDC → JFrog)"
        id: mint_oidc_token
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          PROJECT: ${{ vars.PROJECT_KEY }}
          PROVIDER_NAME: bookverse-inventory-github
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
            echo "❌ Missing GitHub OIDC request env vars" >&2; exit 1; fi
          GH_ID_TOKEN=$(curl -sS -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${JF_URL}" | jq -r .value)
          if [[ -z "$GH_ID_TOKEN" || "$GH_ID_TOKEN" == "null" ]]; then echo "❌ Failed to fetch GitHub ID token" >&2; exit 1; fi
          PAYLOAD=$(jq -n --arg jwt "$GH_ID_TOKEN" \
            --arg provider_name "$PROVIDER_NAME" \
            --arg project_key "$PROJECT" \
            --arg job_id "${{ github.job }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg repo "https://github.com/${{ github.repository }}" \
            --arg revision "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            '{
              grant_type:"urn:ietf:params:oauth:grant-type:token-exchange",
              subject_token_type:"urn:ietf:params:oauth:token-type:id_token",
              subject_token:$jwt,
              provider_name:$provider_name,
              project_key:$project_key,
              job_id:$job_id,
              run_id:$run_id,
              repo:$repo,
              revision:$revision,
              branch:$branch
            }')
          TOKEN=$(curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$JF_URL/access/api/v1/oidc/token" | jq -r .access_token)
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then echo "❌ Failed to exchange OIDC token" >&2; exit 1; fi
          echo "JF_ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "token=$TOKEN" >> $GITHUB_OUTPUT


      - name: "[Release] Create application version"
        env:
          JF_ACCESS_TOKEN: ${{ steps.mint_oidc_token.outputs.token }}
        run: |
          set -euo pipefail
          echo "🚀 Creating AppTrust application version: $APP_VERSION"
          
          # Determine application version tag - simulate real development environment
          # Array of realistic single tags for demo
          TAG_OPTIONS=(
            "release"
            "hotfix"
            "feature"
            "bugfix"
            "enhancement"
            "security"
            "performance"
            "refactor"
            "experimental"
            "maintenance"
            "integration"
            "documentation"
            "stable"
            "beta"
            "alpha"
            "critical"
            "patch"
            "minor"
            "major"
            "cleanup"
          )
          
          # Randomly select single tag based on run number for consistency
          TAG_INDEX=$((${{ github.run_number }} % ${#TAG_OPTIONS[@]}))
          APP_TAG="${TAG_OPTIONS[$TAG_INDEX]}"
          echo "🏷️ Application Version Tag (demo simulation): $APP_TAG"
          
          # Create application version with build sources
          APP_VERSION_PAYLOAD=$(cat << EOF
          {
            "version": "$APP_VERSION",
            "tag": "$APP_TAG",
            "sources": {
              "builds": [
                {
                  "name": "$BUILD_NAME",
                  "number": "$BUILD_NUMBER",
                  "repository_key": "$BUILD_INFO_REPO",
                  "include_dependencies": true
                }
              ]
            }
          }
          EOF
          )
          
          # Debug: show sanitized curl and payload
          echo "📦 Application Key: $APPLICATION_KEY"
          echo "📝 Payload:"; echo "$APP_VERSION_PAYLOAD" | jq . || echo "$APP_VERSION_PAYLOAD"

          # Reuse persisted access token to call AppTrust API with curl
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          JF_URL='${{ vars.JFROG_URL }}'
          PROJECT='${{ vars.PROJECT_KEY }}'
          if [[ -z "${JF_ACCESS_TOKEN:-}" ]]; then
            echo "❌ Missing JF_ACCESS_TOKEN in environment. Ensure earlier auth step persisted it." >&2; exit 1; fi

          # Create application version (capture HTTP status + body)
          RESP_FILE=$(mktemp)
          CODE=$(curl -sS -L -X POST "$JF_URL/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false" \
            -H "Authorization: Bearer $JF_ACCESS_TOKEN" \
            -H "X-JFrog-Project: $PROJECT" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d "$APP_VERSION_PAYLOAD" -o "$RESP_FILE" -w "%{http_code}" || echo 000)
          echo "📨 Response Body:"; cat "$RESP_FILE" || true; echo
          if [[ "$CODE" -lt 200 || "$CODE" -ge 300 ]] || ! jq -e . >/dev/null 2>&1 < "$RESP_FILE"; then
            echo "❌ Failed to create application version (HTTP $CODE)" >&2
            rm -f "$RESP_FILE"; exit 1
          fi

          echo "✅ Application version created: $APPLICATION_KEY@$APP_VERSION"
          echo "📦 Packages will be automatically bound from build sources"
          rm -f "$RESP_FILE"

      # Evidence Plan: App UNASSIGNED – slsa-provenance and jira-tickets (gate to DEV)
      - name: "[Evidence] Prepare UNASSIGNED templates"
        run: |
          set -euo pipefail
          echo "📄 Preparing SLSA and Jira templates"
          cat > slsa.template.md <<'EOF'
          # SLSA Provenance Report 🛡️

          This document summarizes the SLSA (Supply-chain Levels for Software Artifacts) provenance and build context for this version.

          ---

          ## Evidence Details

          * **Framework**: `SLSA`
          * **SLSA Level**: `v1`
          * **Generated At**: `${NOW_TS}`
          * **Builder**: `GitHub Actions`
          * **Workflow**: `${{ github.workflow }}`
          * **Repository**: `${{ github.repository }}`
          * **Commit**: `${{ github.sha }}`
          EOF
          cat > jira.template.md <<'EOF'
          # 🎫 Jira Release Notes

          This evidence lists the Jira issues included in this application version.

          ---

          ## Tickets
          - ${T1} — ${T1_TYPE}
          - ${T2} — ${T2_TYPE}
          - ${T3} — ${T3_TYPE}
          EOF

      - name: "[Evidence] Attach UNASSIGNED (SLSA, Jira)"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ vars.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          export NOW_TS="${NOW_TS}"
          # SLSA predicate and markdown
          cat > slsa.json <<JSON
          {
            "provenance": {
              "framework": "SLSA",
              "level": "v1",
              "generatedAt": "${NOW_TS}",
              "attachStage": "UNASSIGNED",
              "gateForPromotionTo": "DEV"
            }
          }
          JSON
          envsubst < slsa.template.md > slsa.md
          jf evd create-evidence \
            --predicate slsa.json \
            --markdown slsa.md \
            --predicate-type "https://slsa.dev/provenance/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ SLSA evidence attach failed"

          # Jira predicate and markdown
          # Generate a small set of pseudo tickets and types for the release notes
          T1="BV-$(( (${GITHUB_RUN_NUMBER:-0} % 200) + 100 ))"
          T2="BV-$(( ((${GITHUB_RUN_NUMBER:-0} + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 300 ))"
          T3="BV-$(( ((${GITHUB_RUN_NUMBER:-0} * 3 + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 500 ))"
          TYPES=(feature bug improvement)
          T1_TYPE="${TYPES[$(( ${GITHUB_RUN_NUMBER:-0} % 3 ))]}"
          T2_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 1) % 3 ))]}"
          T3_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 2) % 3 ))]}"
          export T1 T2 T3 T1_TYPE T2_TYPE T3_TYPE
          cat > jira.json <<JSON
          {
            "jira": {
              "tickets": [
                {"id": "${T1}", "type": "${T1_TYPE}"},
                {"id": "${T2}", "type": "${T2_TYPE}"},
                {"id": "${T3}", "type": "${T3_TYPE}"}
              ]
            }
          }
          JSON
          envsubst < jira.template.md > jira.md
          jf evd create-evidence \
            --predicate jira.json \
            --markdown jira.md \
            --predicate-type "https://atlassian.com/evidence/jira/release/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "⚠️ Jira evidence attach failed"

      - name: "[Evidence] Attach Build Info"
        run: |
          echo "🛡️ Complete evidence summary for AppTrust application version"
          echo "📋 Evidence Summary:"
          echo "   🐳 Artifacts: Docker container image with attached evidence"
          echo "   📊 Coverage Evidence: ${COVERAGE_PERCENT:-N/A}% (pytest) attached to image"
          echo "   🔨 Build: $SERVICE_NAME#$IMAGE_TAG"
          echo "   🏷️ Version: $APP_VERSION (SemVer compliant)"
          echo "   📅 Created: $(date -u)"
          echo "   👤 Developer: ${{ github.actor }}"
          echo "   👨‍💼 Reviewer: tech-lead-$(echo ${{ github.actor }} | head -c3)"
          echo "   🔗 Commit: ${{ github.sha }}"
          echo ""
          echo "✅ Complete evidence trail documented and attached"

      - name: "[Summary] AppTrust"
        run: |
          echo "## 🚀 AppTrust Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Evidence Plan: see bookverse-demo-init/docs/EVIDENCE_PLAN.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** \`$APPLICATION_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "**Container Tag:** \`$SERVICE_NAME:$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`$GITHUB_SHA\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts Bound" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build artifacts from \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker image: \`$SERVICE_NAME:$IMAGE_TAG\` (SBOMs & signatures via registry policy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Steps Executed and Evidence Added" >> $GITHUB_STEP_SUMMARY
          echo "1. 🔧 Build & Test" >> $GITHUB_STEP_SUMMARY
          echo "   - Ran pytest with coverage → ${COVERAGE_PERCENT:-N/A}%" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (package): coverage-evidence.json + coverage-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "   - Reports: coverage.xml, htmlcov/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔍 SAST Scan (Checkmarx)" >> $GITHUB_STEP_SUMMARY
          echo "   - Findings: Critical=0, High=0, Medium=1, Low=2" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (package): sast-evidence.json + sast-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. 🧭 Publish Build Info" >> $GITHUB_STEP_SUMMARY
          echo "   - Build Info captured and published to project \`${{ vars.PROJECT_KEY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "4. 🧰 Quality Gate (SonarQube)" >> $GITHUB_STEP_SUMMARY
          echo "   - Status: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (build): quality-gate.json + quality-gate.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "5. 📜 License Compliance (FOSSA)" >> $GITHUB_STEP_SUMMARY
          echo "   - Status: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (build): license-evidence.json + license-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "6. 🆕 Create Application Version & Bind Packages" >> $GITHUB_STEP_SUMMARY
          echo "   - Created: \`$APPLICATION_KEY@$APP_VERSION\` (sources from \`$BUILD_NAME#$BUILD_NUMBER\`)" >> $GITHUB_STEP_SUMMARY
          echo "   - Automatically bound artifacts from the build (including the Docker image)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "7. 🛡️ Governance Evidence for Promotion to DEV" >> $GITHUB_STEP_SUMMARY
          echo "   - SLSA Provenance (release bundle, attachStage=UNASSIGNED, gateForPromotionTo=DEV)" >> $GITHUB_STEP_SUMMARY
          echo "   - Jira Release Notes (3 tickets; demo values)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧾 Evidence by Subject" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Package (\`$SERVICE_NAME:$IMAGE_TAG\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - 📊 Coverage (pytest): ${COVERAGE_PERCENT:-N/A}%" >> $GITHUB_STEP_SUMMARY
          echo "  - 🛡️ SAST (Checkmarx): Critical=0, High=0, Medium=1, Low=2" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build (\`$BUILD_NAME#$BUILD_NUMBER\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - ✅ SonarQube Quality Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "  - ✅ FOSSA License Compliance: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- 🎁 Release Bundle (\`$APPLICATION_KEY@$APP_VERSION\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - 🔒 SLSA Provenance (v1)" >> $GITHUB_STEP_SUMMARY
          echo "  - 🎫 Jira Release Notes (BV-xxx)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Promotion Readiness" >> $GITHUB_STEP_SUMMARY
          echo "- Target Environment: DEV" >> $GITHUB_STEP_SUMMARY
          echo "- All required pre-promotion evidence present (coverage, SAST, quality gate, license, SLSA, release notes)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 References" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${{ vars.PROJECT_KEY }}\` on \`${{ vars.JFROG_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- AppTrust Application Version: \`$APPLICATION_KEY@$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Info: \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Application version prepared and ready for governance and promotion to DEV.**" >> $GITHUB_STEP_SUMMARY

  # Legacy 'attach-verified-only' job removed; verified-only flow deprecated.
