name: CI

env:
  DEMO_MODE: "false"

# NOTE: Manual trigger only during development phase
# Will be changed to automatic triggers (push/PR) when demo is ready
on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI trigger'
        required: false
        default: 'Manual testing'
        type: string
      DEMO_MODE:
        description: 'Enable demo mode (verbose logs, request tracing)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

# Evidence signing configuration:
# - secrets.EVIDENCE_PRIVATE_KEY: private key material (sensitive)
# - vars.EVIDENCE_KEY_ALIAS: non-secret alias passed to --key-alias

jobs:
  build-test-publish:
    name: CI
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      id-token: write
    outputs:
      build_name: ${{ steps.set-build-info.outputs.build_name }}
      build_number: ${{ steps.set-build-info.outputs.build_number }}
      app_version: ${{ steps.set-app-version.outputs.app_version }}
      coverage_percent: ${{ steps.test-coverage.outputs.coverage_percent }}
      docker_build_push_status: ${{ steps.export-status-outputs.outputs.docker_build_push_status }}
      build_info_publish_status: ${{ steps.export-status-outputs.outputs.build_info_publish_status }}
      coverage_evidence_status: ${{ steps.export-status-outputs.outputs.coverage_evidence_status }}
      sast_evidence_status: ${{ steps.export-status-outputs.outputs.sast_evidence_status }}
      quality_evidence_status: ${{ steps.export-status-outputs.outputs.quality_evidence_status }}
      license_evidence_status: ${{ steps.export-status-outputs.outputs.license_evidence_status }}


    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] DEMO_MODE"
        if: ${{ inputs.DEMO_MODE == 'true' || env.DEMO_MODE == 'true' }}
        run: |
          echo "üîî DEMO_MODE enabled"
          # Enable GitHub Actions debug logs for this job
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          # Make HTTP helpers verbose
          echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
          # Many steps respect this to show detailed shell execution
          echo "BASH_XTRACE_ENABLED=1" >> $GITHUB_ENV
          # Also useful for services using LOG_LEVEL env
          echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV

      - name: "[Setup] HTTP debug"
        run: |
          # HTTP_DEBUG_LEVEL: none|basic|verbose (default basic)
          case "${HTTP_DEBUG_LEVEL:-}" in
            none|basic|verbose)
              echo "HTTP_DEBUG_LEVEL=${HTTP_DEBUG_LEVEL}" >> $GITHUB_ENV ;;
            *)
              # If DEMO_MODE is on, keep verbose, else default basic
              if [[ "${{ inputs.DEMO_MODE }}" == "true" || "${DEMO_MODE:-}" == "true" ]]; then
                echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
              else
                echo "HTTP_DEBUG_LEVEL=basic" >> $GITHUB_ENV
              fi ;;
          esac

      - name: "[Setup] Build Info"
        id: set-build-info
        run: |
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: "[Info] Manual trigger"
        run: |
          echo "üöÄ Manual CI trigger initiated"
          echo "üìù Reason: ${{ inputs.reason }}"
          echo "üéõÔ∏è DEMO_MODE: ${{ inputs.DEMO_MODE }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo "üïê Timestamp: $(date -u)"
      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          oidc-audience: ${{ vars.JFROG_URL }}
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ steps.set-build-info.outputs.build_name }}
          JFROG_CLI_BUILD_NUMBER: ${{ steps.set-build-info.outputs.build_number }}

      - name: "[Setup] Build variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c7)
          REGISTRY_URL="${{ vars.DOCKER_REGISTRY }}"
          IMAGE_NAME="${REGISTRY_URL}/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local/${SERVICE_NAME}:${IMAGE_TAG}"
          DOCKER_REPO="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local"

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "REGISTRY_URL=$REGISTRY_URL" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV
          echo "TESTS_PASSED=true" >> $GITHUB_ENV

      - name: "[Setup] Determine SemVer"
        run: |
          set -euo pipefail
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "üîé Resolving next SemVer for $APPLICATION_KEY"
          RESP=$(jf curl "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Accept: application/json" || true)
          if LATEST_VERSION=$(echo "$RESP" | jq -er '.versions[0].version // empty' 2>/dev/null); then
            :
          else
            LATEST_VERSION=""
          fi
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
            APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          else
            echo "üÜï No existing versions found, starting fresh"
            # Generate initial random SemVer: major 1-5, minor 1-50, patch 1-50
            MAJOR=$(( (RANDOM % 5) + 1 ))
            MINOR=$(( (RANDOM % 50) + 1 ))
            PATCH=$(( (RANDOM % 50) + 1 ))
            APP_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üéØ Generated initial version: $APP_VERSION"
          fi
          # Update tags to SemVer
          IMAGE_TAG="$APP_VERSION"
          IMAGE_NAME="${REGISTRY_URL}/${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local/${SERVICE_NAME}:${IMAGE_TAG}"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: "[Setup] Determine SemVer"
        id: set-app-version
        run: |
          set -euo pipefail
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          # Fallback minimal debug function (respects HTTP_DEBUG_LEVEL)
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              # Allow forcing header via env var, otherwise infer from URL
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          SERVICE_NAME=${SERVICE_NAME:-$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')}
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          echo "üîé Resolving next SemVer for $APPLICATION_KEY"
          RESP=$(jf curl "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Accept: application/json" || true)
          echo "üî¢ Versions GET via jf curl"
          # Attempt to parse JSON; if parsing fails, fall back
          if LATEST_VERSION=$(echo "$RESP" | jq -er '.versions[0].version // empty' 2>/dev/null); then
            :
          else
            echo "‚ö†Ô∏è Non-JSON or unexpected response from versions API; falling back to 1.0.0"
            LATEST_VERSION=""
          fi
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
            APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            echo "‚¨ÜÔ∏è Latest=$LATEST_VERSION ‚Üí Next=$APP_VERSION"
          else
            echo "üÜï No existing versions found, starting fresh"
            # Generate initial random SemVer: major 1-5, minor 1-50, patch 1-50
            MAJOR=$(( (RANDOM % 5) + 1 ))
            MINOR=$(( (RANDOM % 50) + 1 ))
            PATCH=$(( (RANDOM % 50) + 1 ))
            APP_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üéØ Generated initial version: $APP_VERSION"
          fi
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          # Update image tag/name to use SemVer
          REGISTRY_URL=${REGISTRY_URL:-${{ vars.DOCKER_REGISTRY }}}
          IMAGE_TAG="$APP_VERSION"
          IMAGE_NAME="$REGISTRY_URL/${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local/$SERVICE_NAME:$IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV

      - name: "[Setup] Next Docker tag (per-image SemVer)"
        run: |
          set -euo pipefail
          JF_URL='${{ vars.JFROG_URL }}'
          REPO_KEY="${{ vars.PROJECT_KEY }}-${SERVICE_NAME}-internal-docker-nonprod-local"
          IMG_NAME="$SERVICE_NAME"
          RESP=$(jf curl -H "Accept: application/json" "/api/docker/$REPO_KEY/v2/$IMG_NAME/tags/list" || true)
          # Validate that RESP is JSON before parsing with jq
          if ! echo "$RESP" | jq -e . >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Non-JSON response when listing tags for $REPO_KEY/$IMG_NAME"
            echo "Response:"
            echo "$RESP"
            next_tag=""
          else
            next_tag=$(echo "$RESP" | jq -r '[.tags[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))] | sort_by([ (split(".")[0]|tonumber),(split(".")[1]|tonumber),(split(".")[2]|tonumber) ]) | (last // empty) ')
          fi
          if [[ -n "$next_tag" ]]; then
            IFS='.' read -r ma mi pa <<<"$next_tag" || true
            pa=$((pa+1))
            API_IMAGE_TAG="$ma.$mi.$pa"
          else
            seed=$(printf '%s' "$REPO_KEY/$IMG_NAME" | sha256sum | cut -c1-4 | tr -d '\n' || true)
            base_minor=$(( (0x${seed:0:2} % 3) ))
            base_patch=$(( (0x${seed:2:2} % 9) + 1 ))
            API_IMAGE_TAG="1.${base_minor}.${base_patch}"
          fi
          echo "API_IMAGE_TAG=$API_IMAGE_TAG" >> $GITHUB_ENV
          IMAGE_NAME="$REGISTRY_URL/$REPO_KEY/$IMG_NAME:$API_IMAGE_TAG"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          oidc-audience: ${{ vars.JFROG_URL }}
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ steps.set-build-info.outputs.build_name }}
          JFROG_CLI_BUILD_NUMBER: ${{ steps.set-build-info.outputs.build_number }}
      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: "[Diag] Python deps"
        run: |
          set -euo pipefail
          echo "üîé Checking Artifactory connectivity and PyPI virtual repo"
          jf rt ping || true
          jf curl -XGET "/api/repositories/${{ vars.PROJECT_KEY }}-pypi-virtual" || true
          # Configure pip to use the virtual repo and disable prompts/version check
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          export PIP_DISABLE_PIP_VERSION_CHECK=1
          export PIP_NO_INPUT=1
          python -m pip --version
          python -m pip debug -v || true
          echo "üîé Checking fastapi availability via virtual index"
          PIP_INDEX_URL="${{ vars.JFROG_URL }}/artifactory/api/pypi/${{ vars.PROJECT_KEY }}-pypi-virtual/simple"
          # Avoid interactive pip; probe with authenticated jfrog CLI instead
          jf curl -XGET "/api/pypi/${{ vars.PROJECT_KEY }}-pypi-virtual/simple/fastapi/" >/dev/null 2>&1 \
            && echo "‚úÖ fastapi index accessible via virtual repo" \
            || echo "‚ö†Ô∏è Unable to access $PIP_INDEX_URL/fastapi/ (check repo and permissions)"

      - name: "[Build Info] Collect Python deps"
        run: |
          python -m pip install --upgrade "pip<25"
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install -r requirements.txt; then
            echo "‚ö†Ô∏è jf pip install failed; falling back to public PyPI"
            pip install -r requirements.txt -i https://pypi.org/simple
          fi

      - name: "[Test] Install deps"
        run: |
          set -euo pipefail
          jf pipc --repo-resolve "${{ vars.PROJECT_KEY }}-pypi-virtual"
          if ! jf pip install pytest pytest-cov httpx; then
            pip install -U pytest pytest-cov httpx -i https://pypi.org/simple
          fi

      - name: "[Test] Run with coverage"
        id: test-coverage
        run: |
          set -euo pipefail
          echo "üß™ Running tests with coverage"
          pytest --maxfail=1 --disable-warnings -q \
                 --cov=app --cov-report=xml:coverage.xml --cov-report=html:htmlcov
          echo "TESTS_PASSED=true" >> $GITHUB_ENV
          # Extract coverage percent from coverage.xml
          COV=$(python -c "import xml.etree.ElementTree as ET;root=ET.parse('coverage.xml').getroot();rate=float(root.get('line-rate') or 0.0);print(round(rate*100.0,1))")
          echo "COVERAGE_PERCENT=$COV" >> $GITHUB_ENV
          echo "coverage_percent=$COV" >> $GITHUB_OUTPUT

      - name: "[Build] API image"
        run: |
          set -euo pipefail
          # Use JFrog CLI to authenticate pushes without requiring docker login
          SERVER_ID="${SETUP_JFROG_CLI_SERVER_IDS:-setup-jfrog-cli-server}"
          jf c use "$SERVER_ID" || true
          # Build image using modern command
          jf docker build --pull -t "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER" .
          # TEMP: Artifactory < 7.33.3 doesn't support 'jf docker push'.
          # Re-enable the original push line below once Artifactory is upgraded.
          # jf docker push "$IMAGE_NAME" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          # Using deprecated fallback below: 'jf rt docker-push' (alias: 'jf rt dp').
          jf rt dp --project "${{ vars.PROJECT_KEY }}" "$IMAGE_NAME" "$DOCKER_REPO" --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "DOCKER_BUILD_PUSH_STATUS=SUCCESS" >> $GITHUB_ENV
          echo "‚úÖ Built and pushed Docker image (with build-info)"

      # Rely on Build Info as the source of truth; explicit registry checks removed

      # Evidence Plan: Package subject ‚Äì unit-tests (pytest)
      - name: "[Evidence] Prepare coverage template"
        run: |
          set -euo pipefail
          echo "üìÑ Preparing pytest coverage evidence template"
          # Create a literal template to avoid shell expansion
          cat > coverage-evidence.template.md <<'EOF'
          # Code Coverage Report: `pytest`

          > ${STATUS_EMOJI} Status: ${STATUS}

          This report details the results of the automated code coverage checks.

          ---

          ## üìä Key Metrics

          | Metric | Result |
          | :------------------ | :-------------------------------- |
          | **Code Coverage** | `${COVERAGE_PERCENT}%` |
          | **Testing Framework** | `pytest` |

          ---

          ## üìù Analysis & Recommendations

          ${ANALYSIS_TEXT}

          ---

          ## üìÑ Generated Report Artifacts

          *A detailed breakdown of the results can be found in the following files:*

          * `coverage.xml`
          * `htmlcov/index.html`

          ---
          <p align="right">‚è∞ Report Generated: <code>${NOW_TS}</code> (UTC)</p>
          EOF

      - name: "[Evidence] Attach coverage"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          # Ensure envsubst is available
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          # Prepare predicate JSON using the same timestamp used in markdown
          cat > coverage-evidence.json <<JSON
          {
            "framework": "pytest",
            "status": "PASSED",
            "coveragePercent": ${COVERAGE_PERCENT:-0},
            "generatedAt": "${NOW_TS}",
            "reports": ["coverage.xml", "htmlcov/index.html"]
          }
          JSON
          # Export variables for envsubst
          export STATUS="PASSED"
          export STATUS_EMOJI="‚úÖ"
          export COVERAGE_PERCENT="${COVERAGE_PERCENT:-0}"
          export NOW_TS="${NOW_TS}"
          export ANALYSIS_TEXT="Coverage is ${COVERAGE_PERCENT:-0}% with pytest. Aim to keep above 85%. Add tests for critical paths as needed."
          # Render the template
          envsubst < coverage-evidence.template.md > coverage-evidence.md
          # Attach evidence
          if jf evd create-evidence \
            --predicate coverage-evidence.json \
            --markdown coverage-evidence.md \
            --predicate-type "https://pytest.org/evidence/results/v1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local" \
            --package-version "$API_IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "COVERAGE_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "COVERAGE_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Coverage evidence attachment failed"
          fi

      # Evidence Plan: Package subject ‚Äì sast-scan (Checkmarx)
      - name: "[Evidence] Prepare SAST template"
        run: |
          set -euo pipefail
          echo "üìÑ Preparing SAST evidence template"
          cat > sast-evidence.template.md <<'EOF'
          ### üõ°Ô∏è Checkmarx SAST Scan Summary

          | Status | Details |
          | :--- | :--- |
          | ‚úÖ Review Required | No Critical or High severity issues were found. A manual review is recommended. |

          ---

          ## Vulnerability Summary

          The following table breaks down the findings by severity level.

          | Severity | Count |
          | :------------- | :---: |
          | üî¥ **Critical** | 0 |
          | üü† **High** | 0 |
          | üü° **Medium** | 1 |
          | üîµ **Low** | 2 |

          ---

          ## Scan Context

          * **SAST Tool**: `Checkmarx`
          * **Repository**: `${{ github.repository }}`
          * **Commit SHA**: `${{ github.sha }}`
          * **Scan Date (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach SAST"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          # Create predicate JSON
          cat > sast-evidence.json <<JSON
          {
            "sast": {
              "tool": "Checkmarx",
              "scanDate": "${NOW_TS}",
              "summary": {"critical": 0, "high": 0, "medium": 1, "low": 2},
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < sast-evidence.template.md > sast-evidence.md
          if jf evd create-evidence \
            --predicate sast-evidence.json \
            --markdown sast-evidence.md \
            --predicate-type "https://checkmarx.com/evidence/sast/v1.1" \
            --package-name "$SERVICE_NAME" \
            --package-repo-name "${{ vars.PROJECT_KEY }}-$SERVICE_NAME-internal-docker-nonprod-local" \
            --package-version "$API_IMAGE_TAG" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "SAST_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "SAST_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "‚ö†Ô∏è SAST evidence attachment failed"
          fi

      - name: "[Build Info] Publish"
        env:
          JFROG_CLI_LOG_LEVEL: DEBUG
        run: |
          # Ensure project scoping and headers are sent for OIDC access tokens
          echo "Using JFrog server(s):" && jf c show || true
          if jf rt bag --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER" \
             && jf rt bce --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER" \
             && jf rt bp --project "${{ vars.PROJECT_KEY }}" "$BUILD_NAME" "$BUILD_NUMBER"; then
            echo "BUILD_INFO_PUBLISH_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "BUILD_INFO_PUBLISH_STATUS=FAILED" >> $GITHUB_ENV
            exit 1
          fi

      # Evidence Plan: Build subject ‚Äì code-quality (SonarQube)
      - name: "[Evidence] Prepare quality gate"
        run: |
          set -euo pipefail
          echo "üìÑ Preparing quality gate template"
          cat > quality-gate.template.md <<'EOF'
          # SonarQube Quality Gate Report

          > ‚úÖ Status: PASSED

          The project meets all quality requirements and has successfully passed the SonarQube quality gate.

          ---

          ## Gate Details

          * **Analysis Tool**: `SonarQube`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach quality gate"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > quality-gate.json <<JSON
          {
            "qualityGate": {
              "tool": "SonarQube",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < quality-gate.template.md > quality-gate.md
          if jf evd create-evidence \
            --predicate quality-gate.json \
            --markdown quality-gate.md \
            --predicate-type "https://sonarsource.com/evidence/quality-gate/v1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "QUALITY_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "QUALITY_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Quality gate evidence attachment failed"
          fi

      # Evidence Plan: Build subject ‚Äì license-compliance (FOSSA)
      - name: "[Evidence] Prepare license template"
        run: |
          set -euo pipefail
          echo "üìÑ Preparing license compliance template"
          cat > license-evidence.template.md <<'EOF'
          # üõ°Ô∏è FOSSA License Compliance Report

          > ‚úÖ Status: PASSED

          All software dependencies are in compliance with the project's license policies.

          ---

          ## Scan Details

          * **Compliance Tool**: `FOSSA`
          * **Result**: `PASSED`
          * **Checked At (UTC)**: `${NOW_TS}`
          EOF

      - name: "[Evidence] Attach license compliance"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > license-evidence.json <<JSON
          {
            "licenseScan": {
              "tool": "FOSSA",
              "status": "PASSED",
              "checkedAt": "${NOW_TS}"
            }
          }
          JSON
          export NOW_TS="${NOW_TS}"
          envsubst < license-evidence.template.md > license-evidence.md
          if jf evd create-evidence \
            --predicate license-evidence.json \
            --markdown license-evidence.md \
            --predicate-type "https://fossa.com/evidence/license-scan/v2.1" \
            --build-name "$BUILD_NAME" \
            --build-number "$BUILD_NUMBER" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}"; then
            echo "LICENSE_EVIDENCE_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "LICENSE_EVIDENCE_STATUS=FAILED" >> $GITHUB_ENV
            echo "‚ö†Ô∏è License compliance evidence attachment failed"
          fi

      - name: "[Evidence] Export statuses"
        id: export-status-outputs
        run: |
          echo "docker_build_push_status=${DOCKER_BUILD_PUSH_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "build_info_publish_status=${BUILD_INFO_PUBLISH_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "coverage_evidence_status=${COVERAGE_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "sast_evidence_status=${SAST_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "quality_evidence_status=${QUALITY_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT
          echo "license_evidence_status=${LICENSE_EVIDENCE_STATUS:-UNKNOWN}" >> $GITHUB_OUTPUT

  create-application-version:
    needs: build-test-publish
    if: ${{ !inputs.verified_only }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      JFROG_CLI_SIGNING_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}

    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          oidc-audience: ${{ vars.JFROG_URL }}
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}_${{ github.workflow }}_${{ github.job }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      - name: "[Setup] JFrog config"
        run: |
          # Use the server configured by setup-jfrog-cli with OIDC
          jf c show || true
      - name: "[Setup] AppTrust variables"
        run: |
          SERVICE_NAME=$(echo ${{ github.event.repository.name }} | sed 's/bookverse-//')
          APP_VERSION=${{ needs.build-test-publish.outputs.app_version }}
          IMAGE_TAG="${APP_VERSION}"
          APPLICATION_KEY="bookverse-$SERVICE_NAME"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          # Recompute canonical build reference for the build job
          BUILD_NAME="${{ github.event.repository.name }}_${{ github.workflow }}_build-test-publish"
          BUILD_NUMBER="${{ github.run_number }}-${{ github.run_attempt }}"
          BUILD_INFO_REPO="${{ vars.PROJECT_KEY }}-build-info"
          
          echo "üîç Checking for existing application versions..."
          
          if [[ -z "$APP_VERSION" || "$APP_VERSION" == "" ]]; then
            # Compute next SemVer if not provided by build job
          LATEST_VERSION=$(jf curl "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?limit=1&order_by=created&order_asc=false" -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" -H "Accept: application/json" | jq -r '.versions[0].version // empty')
          if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" != "null" ]]; then
              MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
              MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
              PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3 | cut -d- -f1)
              APP_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              echo "‚¨ÜÔ∏è Latest=$LATEST_VERSION ‚Üí Next=$APP_VERSION"
            else
              echo "üÜï No existing versions found, starting fresh"
              # Generate initial version between 1.0.0 to 2.5.9
              MAJOR=1
              MINOR=$((RANDOM % 6))  # 0-5
              PATCH=$((RANDOM % 10)) # 0-9
              APP_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "üéØ Generated initial version: $APP_VERSION"
            fi
            IMAGE_TAG="$APP_VERSION"
          fi
          
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APPLICATION_KEY=$APPLICATION_KEY" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_INFO_REPO=$BUILD_INFO_REPO" >> $GITHUB_ENV
          echo "COVERAGE_PERCENT=${{ needs.build-test-publish.outputs.coverage_percent }}" >> $GITHUB_ENV
          
          echo "‚úÖ AppTrust variables set:"
          echo "   üì¶ Application: $APPLICATION_KEY"
          echo "   üè∑Ô∏è Version: $APP_VERSION"
          echo "   üî® Build: $SERVICE_NAME#$IMAGE_TAG"

      - name: "[Diag] Build Info contents"
        run: |
          set -euo pipefail
          echo "üîé Fetching build info to confirm artifacts are present"
          URL="/api/build/$BUILD_NAME/$BUILD_NUMBER?project=${{ vars.PROJECT_KEY }}"
          echo "GET $URL"
          jf curl -H "Accept: application/json" "$URL" | jq '.buildInfo.modules // [] | map({id, artifacts: (.artifacts // [] | length)})'

      - name: "[Release] Create application version"
        run: |
          echo "üöÄ Creating AppTrust application version: $APP_VERSION"
          
          # Determine application version tag - simulate real development environment
          # Array of realistic single tags for demo
          TAG_OPTIONS=(
            "release"
            "hotfix"
            "feature"
            "bugfix"
            "enhancement"
            "security"
            "performance"
            "refactor"
            "experimental"
            "maintenance"
            "integration"
            "documentation"
            "stable"
            "beta"
            "alpha"
            "critical"
            "patch"
            "minor"
            "major"
            "cleanup"
          )
          
          # Randomly select single tag based on run number for consistency
          TAG_INDEX=$((${{ github.run_number }} % ${#TAG_OPTIONS[@]}))
          APP_TAG="${TAG_OPTIONS[$TAG_INDEX]}"
          echo "üè∑Ô∏è Application Version Tag (demo simulation): $APP_TAG"
          
          # Create application version with build sources
          APP_VERSION_PAYLOAD=$(cat << EOF
          {
            "version": "$APP_VERSION",
            "tag": "$APP_TAG",
            "sources": {
              "builds": [
                {
                  "name": "$BUILD_NAME",
                  "number": "$BUILD_NUMBER",
                  "repository_key": "$BUILD_INFO_REPO",
                  "include_dependencies": true
                }
              ]
            }
          }
          EOF
          )
          
          # Debug: show sanitized curl and payload
          echo "üì¶ Application Key: $APPLICATION_KEY"
          echo "üìù Payload:"; echo "$APP_VERSION_PAYLOAD" | jq . || echo "$APP_VERSION_PAYLOAD"
          # Source shared helper if available, with a robust fallback definition
          if [ -f .github/scripts/http_debug.sh ]; then source .github/scripts/http_debug.sh; fi
          if ! declare -f print_request_debug >/dev/null 2>&1; then
            print_request_debug() {
              local method="$1"; local url="$2"; local body="${3:-}"; local level="${HTTP_DEBUG_LEVEL:-basic}"
              [ "$level" = "none" ] && return 0
              local show_project_header=false
              if [[ "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "true" || "${DEBUG_INCLUDE_PROJECT_HEADER:-}" == "1" ]]; then
                show_project_header=true
              else
                if [[ "$url" == *"/apptrust/api/"* ]]; then
                  if [[ "$url" == *"/promote"* || "$url" == *"/release"* ]]; then
                    show_project_header=false
                  else
                    show_project_header=true
                  fi
                fi
              fi
              local show_content_type=false
              if [[ "$method" == "POST" ]]; then
                show_content_type=true
              fi
              echo "---- Request debug (${level}) ----"
              echo "Method: ${method}"
              echo "URL: ${url}"
              echo "Headers:"
              echo "  Authorization: Bearer ***REDACTED***"
              if $show_project_header && [[ -n "${PROJECT_KEY:-}" ]]; then echo "  X-JFrog-Project: ${PROJECT_KEY}"; fi
              if $show_content_type; then echo "  Content-Type: application/json"; fi
              echo "  Accept: application/json"
              if [ -n "$body" ] && [ "$level" = "verbose" ]; then
                echo "Body: ${body}"
              fi
              echo "-----------------------"
            }
          fi
          DEBUG_INCLUDE_PROJECT_HEADER=false print_request_debug "POST" "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false" "$APP_VERSION_PAYLOAD"

          # Create the application version and inspect response
          RESP=$(jf curl -sS -L -X POST \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions?async=false" \
            -H "Content-Type: application/json" \
            -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
            -H "Accept: application/json" \
            -d "$APP_VERSION_PAYLOAD" || true)
          echo "üì® Response Body:"; echo "$RESP" | cat; echo
          if [[ -z "$RESP" ]] || ! echo "$RESP" | jq -e . >/dev/null 2>&1; then
            echo "‚ùå Failed to create application version (empty or non-JSON response)" >&2
            exit 1
          fi
          
          # Robust validation: fetch content and require status == COMPLETED
          CONTENT=$(jf curl -sS -L \
            "${{ vars.JFROG_URL }}/apptrust/api/v1/applications/$APPLICATION_KEY/versions/$APP_VERSION/content" \
            -H "X-JFrog-Project: ${{ vars.PROJECT_KEY }}" \
            -H "Accept: application/json" || true)
          if [[ -z "$CONTENT" ]] || ! echo "$CONTENT" | jq -e . >/dev/null 2>&1; then
            echo "‚ùå Version content endpoint returned empty/non-JSON for $APPLICATION_KEY@$APP_VERSION" >&2
            echo "üì® Response Body:"; echo "$CONTENT" | cat || true; echo
            exit 1
          fi
          VERSION_STATE=$(echo "$CONTENT" | jq -r '.status // empty' 2>/dev/null || echo "")
          echo "üì® Version Content:"; echo "$CONTENT" | cat || true; echo
          if [[ "$VERSION_STATE" != "COMPLETED" ]]; then
            echo "‚ùå Application version not in COMPLETED state (status='$VERSION_STATE') for $APPLICATION_KEY@$APP_VERSION" >&2
            exit 1
          fi
          echo "‚úÖ Application version created and validated (COMPLETED): $APPLICATION_KEY@$APP_VERSION"
          echo "üì¶ Packages will be automatically bound from build sources"

      # Evidence Plan: App UNASSIGNED ‚Äì slsa-provenance and jira-tickets (gate to DEV)
      - name: "[Evidence] Prepare UNASSIGNED templates"
        run: |
          set -euo pipefail
          echo "üìÑ Preparing SLSA and Jira templates"
          cat > slsa.template.md <<'EOF'
          # SLSA Provenance Report üõ°Ô∏è

          This document summarizes the SLSA (Supply-chain Levels for Software Artifacts) provenance and build context for this version.

          ---

          ## Evidence Details

          * **Framework**: `SLSA`
          * **SLSA Level**: `v1`
          * **Generated At**: `${NOW_TS}`
          * **Builder**: `GitHub Actions`
          * **Workflow**: `${{ github.workflow }}`
          * **Repository**: `${{ github.repository }}`
          * **Commit**: `${{ github.sha }}`
          EOF
          cat > jira.template.md <<'EOF'
          # üé´ Jira Release Notes

          This evidence lists the Jira issues included in this application version.

          ---

          ## Tickets
          - ${T1} ‚Äî ${T1_TYPE}
          - ${T2} ‚Äî ${T2_TYPE}
          - ${T3} ‚Äî ${T3_TYPE}
          EOF

      - name: "[Evidence] Attach UNASSIGNED (SLSA, Jira)"
        env:
          EVIDENCE_PRIVATE_KEY: ${{ secrets.EVIDENCE_PRIVATE_KEY }}
          EVIDENCE_KEY_ALIAS: ${{ secrets.EVIDENCE_KEY_ALIAS }}
          EVIDENCE_KEY_ALIAS_VAR: ${{ vars.EVIDENCE_KEY_ALIAS }}
        run: |
          set -euo pipefail
          if ! command -v envsubst >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y gettext-base; fi
          NOW_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          export NOW_TS="${NOW_TS}"
          # SLSA predicate and markdown
          cat > slsa.json <<JSON
          {
            "provenance": {
              "framework": "SLSA",
              "level": "v1",
              "generatedAt": "${NOW_TS}",
              "attachStage": "UNASSIGNED",
              "gateForPromotionTo": "DEV"
            }
          }
          JSON
          envsubst < slsa.template.md > slsa.md
          jf evd create-evidence \
            --predicate slsa.json \
            --markdown slsa.md \
            --predicate-type "https://slsa.dev/provenance/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "‚ö†Ô∏è SLSA evidence attach failed"

          # Jira predicate and markdown
          # Generate a small set of pseudo tickets and types for the release notes
          T1="BV-$(( (${GITHUB_RUN_NUMBER:-0} % 200) + 100 ))"
          T2="BV-$(( ((${GITHUB_RUN_NUMBER:-0} + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 300 ))"
          T3="BV-$(( ((${GITHUB_RUN_NUMBER:-0} * 3 + ${GITHUB_RUN_ATTEMPT:-0}) % 200) + 500 ))"
          TYPES=(feature bug improvement)
          T1_TYPE="${TYPES[$(( ${GITHUB_RUN_NUMBER:-0} % 3 ))]}"
          T2_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 1) % 3 ))]}"
          T3_TYPE="${TYPES[$(( (${GITHUB_RUN_NUMBER:-0} + 2) % 3 ))]}"
          export T1 T2 T3 T1_TYPE T2_TYPE T3_TYPE
          cat > jira.json <<JSON
          {
            "jira": {
              "tickets": [
                {"id": "${T1}", "type": "${T1_TYPE}"},
                {"id": "${T2}", "type": "${T2_TYPE}"},
                {"id": "${T3}", "type": "${T3_TYPE}"}
              ]
            }
          }
          JSON
          envsubst < jira.template.md > jira.md
          jf evd create-evidence \
            --predicate jira.json \
            --markdown jira.md \
            --predicate-type "https://atlassian.com/evidence/jira/release/v1" \
            --release-bundle "$APPLICATION_KEY" \
            --release-bundle-version "$APP_VERSION" \
            --project "${{ vars.PROJECT_KEY }}" \
            --key "${{ secrets.EVIDENCE_PRIVATE_KEY }}" \
            --key-alias "${{ vars.EVIDENCE_KEY_ALIAS }}" || echo "‚ö†Ô∏è Jira evidence attach failed"

      - name: "[Evidence] Attach Build Info"
        run: |
          echo "üõ°Ô∏è Complete evidence summary for AppTrust application version"
          echo "üìã Evidence Summary:"
          echo "   üê≥ Artifacts: Docker container image with attached evidence"
          echo "   üìä Coverage Evidence: ${COVERAGE_PERCENT:-N/A}% (pytest) attached to image"
          echo "   üî® Build: $SERVICE_NAME#$IMAGE_TAG"
          echo "   üè∑Ô∏è Version: $APP_VERSION (SemVer compliant)"
          echo "   üìÖ Created: $(date -u)"
          echo "   üë§ Developer: ${{ github.actor }}"
          echo "   üë®‚Äçüíº Reviewer: tech-lead-$(echo ${{ github.actor }} | head -c3)"
          echo "   üîó Commit: ${{ github.sha }}"
          echo ""
          echo "‚úÖ Complete evidence trail documented and attached"

      - name: "[Summary] AppTrust"
        run: |
          echo "## üöÄ AppTrust Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ Evidence Plan: see bookverse-demo-init/docs/EVIDENCE_PLAN.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** \`$APPLICATION_KEY\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "**Container Tag:** \`$SERVICE_NAME:$IMAGE_TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`$GITHUB_SHA\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts Bound" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build artifacts from \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Docker image: \`$SERVICE_NAME:$IMAGE_TAG\` (SBOMs & signatures via registry policy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Steps Executed and Evidence Added" >> $GITHUB_STEP_SUMMARY
          echo "1. üîß Build & Test" >> $GITHUB_STEP_SUMMARY
          echo "   - Ran pytest with coverage ‚Üí ${COVERAGE_PERCENT:-N/A}%" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (package): coverage-evidence.json + coverage-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "   - Reports: coverage.xml, htmlcov/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. üîç SAST Scan (Checkmarx)" >> $GITHUB_STEP_SUMMARY
          echo "   - Findings: Critical=0, High=0, Medium=1, Low=2" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (package): sast-evidence.json + sast-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. üß≠ Publish Build Info" >> $GITHUB_STEP_SUMMARY
          echo "   - Build Info captured and published to project \`${{ vars.PROJECT_KEY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "4. üß∞ Quality Gate (SonarQube)" >> $GITHUB_STEP_SUMMARY
          echo "   - Status: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (build): quality-gate.json + quality-gate.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "5. üìú License Compliance (FOSSA)" >> $GITHUB_STEP_SUMMARY
          echo "   - Status: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "   - Evidence (build): license-evidence.json + license-evidence.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "6. üÜï Create Application Version & Bind Packages" >> $GITHUB_STEP_SUMMARY
          echo "   - Created: \`$APPLICATION_KEY@$APP_VERSION\` (sources from \`$BUILD_NAME#$BUILD_NUMBER\`)" >> $GITHUB_STEP_SUMMARY
          echo "   - Automatically bound artifacts from the build (including the Docker image)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "7. üõ°Ô∏è Governance Evidence for Promotion to DEV" >> $GITHUB_STEP_SUMMARY
          echo "   - SLSA Provenance (release bundle, attachStage=UNASSIGNED, gateForPromotionTo=DEV)" >> $GITHUB_STEP_SUMMARY
          echo "   - Jira Release Notes (3 tickets; demo values)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üßæ Evidence by Subject" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Package (\`$SERVICE_NAME:$IMAGE_TAG\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - üìä Coverage (pytest): ${COVERAGE_PERCENT:-N/A}%" >> $GITHUB_STEP_SUMMARY
          echo "  - üõ°Ô∏è SAST (Checkmarx): Critical=0, High=0, Medium=1, Low=2" >> $GITHUB_STEP_SUMMARY
          echo "- üèóÔ∏è Build (\`$BUILD_NAME#$BUILD_NUMBER\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - ‚úÖ SonarQube Quality Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "  - ‚úÖ FOSSA License Compliance: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- üéÅ Release Bundle (\`$APPLICATION_KEY@$APP_VERSION\`):" >> $GITHUB_STEP_SUMMARY
          echo "  - üîí SLSA Provenance (v1)" >> $GITHUB_STEP_SUMMARY
          echo "  - üé´ Jira Release Notes (BV-xxx)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ÑπÔ∏è Promotion Readiness" >> $GITHUB_STEP_SUMMARY
          echo "- Target Environment: DEV" >> $GITHUB_STEP_SUMMARY
          echo "- All required pre-promotion evidence present (coverage, SAST, quality gate, license, SLSA, release notes)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó References" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${{ vars.PROJECT_KEY }}\` on \`${{ vars.JFROG_URL }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- AppTrust Application Version: \`$APPLICATION_KEY@$APP_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Info: \`$BUILD_NAME#$BUILD_NUMBER\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ Application version prepared and ready for governance and promotion to DEV.**" >> $GITHUB_STEP_SUMMARY

  # Legacy 'attach-verified-only' job removed; verified-only flow deprecated.
