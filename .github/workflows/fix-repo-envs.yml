name: Fix Repo Environments

on:
  workflow_dispatch: {}

jobs:
  repair-repo-envs:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI (OIDC)
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: github-bookverse-inventory
          oidc-audience: jfrog-github

      - name: Patch repository environments (release‚ÜíPROD, internal‚Üíproject stages)
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        run: |
          set -euo pipefail
          echo "üîß Fixing repository environments mapping..."
          SERVICES=(inventory checkout recommendations web platform)
          # Map release repos to PROD; internal to project stages
          for svc in "${SERVICES[@]}"; do
            for repo in \
              "${PROJECT_KEY}-${svc}-docker-release-local" \
              "${PROJECT_KEY}-${svc}-python-release-local"; do
              echo "‚Ü™Ô∏è Setting environments=[\"PROD\"] on ${repo}"
              jf rt curl -X PATCH "/api/v2/repositories/${repo}" \
                -H "Content-Type: application/json" \
                -d '{"environments":["PROD"]}' || true
            done
            for repo in \
              "${PROJECT_KEY}-${svc}-docker-internal-local" \
              "${PROJECT_KEY}-${svc}-python-internal-local"; do
              echo "‚Ü™Ô∏è Setting environments=[\"${PROJECT_KEY}-DEV\",\"${PROJECT_KEY}-QA\",\"${PROJECT_KEY}-STAGING\"] on ${repo}"
              jf rt curl -X PATCH "/api/v2/repositories/${repo}" \
                -H "Content-Type: application/json" \
                -d "{\"environments\":[\"${PROJECT_KEY}-DEV\",\"${PROJECT_KEY}-QA\",\"${PROJECT_KEY}-STAGING\"]}" || true
            done
          done
          # Helm repos (shared)
          for repo in \
            "${PROJECT_KEY}-helm-helm-release-local"; do
            echo "‚Ü™Ô∏è Setting environments=[\"PROD\"] on ${repo}"
            jf rt curl -X PATCH "/api/v2/repositories/${repo}" \
              -H "Content-Type: application/json" \
              -d '{"environments":["PROD"]}' || true
          done
          for repo in \
            "${PROJECT_KEY}-helm-helm-internal-local"; do
            echo "‚Ü™Ô∏è Setting environments=[\"${PROJECT_KEY}-DEV\",\"${PROJECT_KEY}-QA\",\"${PROJECT_KEY}-STAGING\"] on ${repo}"
            jf rt curl -X PATCH "/api/v2/repositories/${repo}" \
              -H "Content-Type: application/json" \
              -d "{\"environments\":[\"${PROJECT_KEY}-DEV\",\"${PROJECT_KEY}-QA\",\"${PROJECT_KEY}-STAGING\"]}" || true
          done

      - name: Verify release repositories are mapped to PROD
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        run: |
          set -euo pipefail
          CHECKS=(
            "${PROJECT_KEY}-inventory-docker-release-local"
            "${PROJECT_KEY}-inventory-python-release-local"
          )
          for repo in "${CHECKS[@]}"; do
            echo "üîé ${repo} environments:";
            jf rt curl -X GET "/api/repositories/${repo}" | jq '.environments'
          done

