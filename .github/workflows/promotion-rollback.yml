name: Rollback

# Documentation:
# This workflow performs a rollback of an application version using the
# dedicated AppTrust rollback API. High-level flow:
# 1) Resolve the target version (input or latest promoted)
# 2) Capture BEFORE current_stage via Content API
# 3) Execute rollback via scripts/apptrust_rollback.py, which calls:
#    POST /apptrust/api/v1/applications/{app}/versions/{ver}/rollback
#    with body { from_stage: <current_stage> }
# 4) Capture AFTER current_stage and compute expected previous stage using the
#    lifecycle definition (bookverse-lifecycle or default DEV→QA→STAGING→PROD)
# 5) Validate: stage_after must equal previous(stage_before)
# 6) Summarize and fail the job if validation fails

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (SemVer) to rollback (omit to use latest promoted)"
        required: false
        type: string
      DEMO_MODE:
        description: 'Enable demo mode (verbose logs, request tracing)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

concurrency:
  group: promotion-rollback-${{ github.event.repository.name }}
  cancel-in-progress: false

jobs:
  rollback:
    name: Rollback ${{ github.event.repository.name }} ${{ inputs.version || 'latest-promoted' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      DEMO_MODE: "false"
    steps:
      - name: "[Setup] Checkout"
        uses: actions/checkout@v4

      - name: "[Setup] DEMO_MODE"
        if: ${{ inputs.DEMO_MODE == 'true' || env.DEMO_MODE == 'true' }}
        run: |
          echo "🔔 DEMO_MODE enabled"
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
          echo "BASH_XTRACE_ENABLED=1" >> $GITHUB_ENV

      - name: "[Setup] Python"
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: "[Setup] JFrog CLI"
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          oidc-provider-name: bookverse-inventory-github
          disable-job-summary: true
          oidc-audience: ${{ vars.JFROG_URL }}

      - name: "[Rollback] Execute"
        shell: bash
        run: |
          set -euo pipefail
          echo "🧭 Starting rollback workflow"
          APPTRUST_BASE_URL="/apptrust/api/v1"

          # Derive application key from repo name (e.g., bookverse-inventory -> bookverse-inventory)
          SERVICE_NAME=$(echo "${GITHUB_REPOSITORY#*/}" | sed 's/bookverse-//')
          APP_KEY="bookverse-$SERVICE_NAME"
          echo "📦 Application: $APP_KEY"

          # Determine target version: use input if provided, else resolve latest promoted
          TARGET_VERSION="${{ inputs.version || '' }}"
          if [ -z "$TARGET_VERSION" ]; then
            echo "🔎 Resolving latest promoted version for $APP_KEY"
            RESP=$(jf curl "$APPTRUST_BASE_URL/applications/$APP_KEY/versions?limit=20&order_by=created&order_asc=false" -H "Accept: application/json" || true)
            TARGET_VERSION=$(echo "$RESP" | jq -r '.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version' | head -n1)
            if [ -z "${TARGET_VERSION:-}" ] || [ "$TARGET_VERSION" = "null" ]; then
              echo "❌ Could not resolve latest promoted version for $APP_KEY" >&2
              exit 1
            fi
            echo "🎯 Defaulting to latest promoted version: $TARGET_VERSION"
          fi

          # Snapshot BEFORE stage via content API
          CONTENT_BEFORE=$(mktemp)
          CODE_B=$(jf curl -sS -L -o "$CONTENT_BEFORE" -w "%{http_code}" \
            "$APPTRUST_BASE_URL/applications/$APP_KEY/versions/$TARGET_VERSION/content" \
            -H "Accept: application/json" || echo 000)
          CURRENT_STAGE_BEFORE=""
          if [[ "$CODE_B" -ge 200 && "$CODE_B" -lt 300 ]]; then
            CURRENT_STAGE_BEFORE=$(jq -r '.current_stage // empty' "$CONTENT_BEFORE" 2>/dev/null || echo "")
          fi
          rm -f "$CONTENT_BEFORE"
          echo "📍 Stage BEFORE: ${CURRENT_STAGE_BEFORE:-unknown}"

          STATUS="SUCCESS"
          MSG=""
          echo "🔁 Executing rollback via scripts/apptrust_rollback.py"
          if python3 scripts/apptrust_rollback.py \
            --app "$APP_KEY" \
            --version "$TARGET_VERSION"; then
            MSG="Rollback executed for $APP_KEY@$TARGET_VERSION"
          else
            STATUS="FAILED"
            MSG="Rollback failed for $APP_KEY@$TARGET_VERSION"
          fi

          # Fetch AFTER stage via content API
          CONTENT_TARGET=$(mktemp)
          CODE_T=$(jf curl -sS -L -o "$CONTENT_TARGET" -w "%{http_code}" \
            "$APPTRUST_BASE_URL/applications/$APP_KEY/versions/$TARGET_VERSION/content" \
            -H "Accept: application/json" || echo 000)
          CURR_STAGE_TARGET=""
          if [[ "$CODE_T" -ge 200 && "$CODE_T" -lt 300 ]]; then
            CURR_STAGE_TARGET=$(jq -r '.current_stage // empty' "$CONTENT_TARGET" 2>/dev/null || echo "")
          fi
          rm -f "$CONTENT_TARGET"
          echo "📍 Stage AFTER:  ${CURR_STAGE_TARGET:-unknown}"

      - name: "[Tags] Enforce PROD 'latest' invariants"
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y jq; fi
          APP_KEY="$APPLICATION_KEY"
          BASE="/apptrust/api/v1"
          RESP=$(jf curl -sS -L -H "Accept: application/json" "$BASE/applications/$APP_KEY/versions?limit=1000&order_by=created&order_asc=false" || true)
          DESIRED=$(jq -r '[.versions[] | select((.release_status|tostring|ascii_upcase)=="RELEASED" or (.release_status|tostring|ascii_upcase)=="TRUSTED_RELEASE") | .version] | unique | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(split(".")|map(tonumber)) | last // empty' "$RESP")
          if [[ -n "$DESIRED" ]]; then
            CURR_TAG=$(jq -r --arg v "$DESIRED" '.versions[] | select(.version==$v) | (.tag // "")' "$RESP")
            jq -n --arg ct "$CURR_TAG" '{tag:"latest", properties:{original_tag_before_latest:[$ct]}}' > body.json
            jf curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$DESIRED" -H "Content-Type: application/json" -d @body.json | cat
          fi
          mapfile -t OTHERS < <(jq -r --arg v "$DESIRED" '.versions[] | select(.tag=="latest" and .version!=$v) | .version' "$RESP")
          for ov in "${OTHERS[@]:-}"; do
            [ -z "$ov" ] && continue
            restore=$(jq -r --arg v "$ov" '.versions[] | select(.version==$v) | (.properties.original_tag_before_latest[0] // .version // "")' "$RESP")
            printf '{"tag":"%s","delete_properties":["original_tag_before_latest"]}' "$restore" > body.json
            jf curl -sS -L -X PATCH "$BASE/applications/$APP_KEY/versions/$ov" -H "Content-Type: application/json" -d @body.json | cat
          done
          rm -f "$RESP" body.json || true

          # Determine lifecycle stages to compute expected previous stage
          PROJECT_KEY_ENV="${{ vars.PROJECT_KEY }}"
          LC_FILE=$(mktemp)
          PLATFORM_URL="${{ vars.JFROG_URL }}"
          CODE_LC=$(jf rt curl -sS -L -o "$LC_FILE" -w "%{http_code}" "/api/v2/lifecycle/?project_key=$PROJECT_KEY_ENV" -H "Accept: application/json" || echo 000)
          NORM_FILE=$(mktemp)
          if [[ "$CODE_LC" -ge 200 && "$CODE_LC" -lt 300 ]]; then
            jq -c 'if type=="array" then . elif has("lifecycles") then .lifecycles elif has("items") then .items elif has("results") then .results elif (has("name") and has("stages")) then [.] else [] end' "$LC_FILE" > "$NORM_FILE" 2>/dev/null || printf '[]' > "$NORM_FILE"
          else
            printf '[]' > "$NORM_FILE"
          fi
          rm -f "$LC_FILE"
          LIFECYCLE_NAME="bookverse-lifecycle"
          STAGES=()
          while IFS= read -r s; do
            [ -z "$s" ] && continue
            s_disp="$s"
            case "$s_disp" in
              "$PROJECT_KEY_ENV"-*) s_disp="${s_disp#${PROJECT_KEY_ENV}-}";;
            esac
            STAGES+=("$s_disp")
          done < <(jq -r --arg n "$LIFECYCLE_NAME" '([ .[] | select(.name==$n) | .stages ] | .[0] // []) | map(if type=="object" then .name else . end) | .[]' "$NORM_FILE" 2>/dev/null)
          rm -f "$NORM_FILE"
          if [[ ${#STAGES[@]} -eq 0 ]]; then
            STAGES=(DEV QA STAGING PROD)
          fi
          echo "🧭 Lifecycle stages: ${STAGES[*]}"
          # Compute expected previous stage
          display_stage() {
            local x="$1"; local p="$PROJECT_KEY_ENV"; if [[ "$x" == "PROD" || "$x" == "$p-PROD" ]]; then echo "PROD"; elif [[ "$x" == "$p-"* ]]; then echo "${x#${p}-}"; else echo "$x"; fi
          }
          CURR_BEFORE_DISP=$(display_stage "${CURRENT_STAGE_BEFORE}")
          CURR_AFTER_DISP=$(display_stage "${CURR_STAGE_TARGET}")
          idx_before=-1
          for i in "${!STAGES[@]}"; do if [[ "${STAGES[$i]}" == "$CURR_BEFORE_DISP" ]]; then idx_before=$i; break; fi; done
          EXPECTED_PREV="UNASSIGNED"
          if [[ $idx_before -gt 0 ]]; then EXPECTED_PREV="${STAGES[$((idx_before-1))]}"; elif [[ $idx_before -eq 0 ]]; then EXPECTED_PREV="UNASSIGNED"; fi
          echo "🔎 Expected previous stage: ${EXPECTED_PREV}"

          VALIDATION_ERRORS=()
          if [[ -z "$CURRENT_STAGE_BEFORE" || "$CURR_BEFORE_DISP" == "UNASSIGNED" ]]; then
            VALIDATION_ERRORS+=("Cannot rollback UNASSIGNED version")
          fi
          if [[ "$CURR_AFTER_DISP" != "$EXPECTED_PREV" ]]; then
            VALIDATION_ERRORS+=("Stage after rollback '$CURR_AFTER_DISP' != expected '$EXPECTED_PREV'")
          fi

          # Finalize validation status after all checks
          if [ ${#VALIDATION_ERRORS[@]} -gt 0 ]; then
            STATUS="FAILED"
            MSG="Validation failed: ${VALIDATION_ERRORS[*]}"
          fi

          if [ ${#VALIDATION_ERRORS[@]} -gt 0 ]; then
            STATUS="FAILED"
            MSG="Validation failed: ${VALIDATION_ERRORS[*]}"
          fi

          {
            echo "## 🔄 Promotion Rollback"
            echo ""
            echo "**Repository:** \`${{ github.repository }}\`"
            echo "**Application:** \`$APP_KEY\`"
            echo "**Target Version:** \`$TARGET_VERSION\`"
            echo "**Status:** ${STATUS}"
            echo ""
            echo "### Details"
            echo "- Triggered by: \`${{ github.actor }}\`"
            echo "- Workflow run: \`${{ github.run_id }}\` (attempt \`${{ github.run_attempt }}\`)"
            echo "- Timestamp (UTC): \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`"
            echo ""
            echo "### Validation"
            echo "- Stage before: \`${CURR_BEFORE_DISP:-unknown}\`"
            echo "- Stage after:  \`${CURR_AFTER_DISP:-unknown}\`"
            echo "- Expected previous stage: \`${EXPECTED_PREV:-unknown}\`"
            if [ "${#VALIDATION_ERRORS[@]}" -gt 0 ]; then
              echo "- Result: ❌ ${MSG}"
            else
              echo "- Result: ✅ Rollback validated"
            fi
            echo ""
            echo "${MSG}"
          } >> "$GITHUB_STEP_SUMMARY"

          # Fail the job if validation failed
          if [ "$STATUS" = "FAILED" ]; then
            echo "${MSG}" >&2
            exit 1
          fi
