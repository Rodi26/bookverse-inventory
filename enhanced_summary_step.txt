      - name: "📊 Enhanced Build Summary with Accurate Reporting"
        if: always()
        run: |
          echo "📊 Generating enhanced CI/CD pipeline summary with accurate reporting"
          
          # Determine actual job statuses
          JOB_1_STATUS="✅ Completed"
          if [[ "${{ needs.build-test-publish.result }}" == "success" ]]; then
            JOB_2_STATUS="✅ Completed"
          else
            JOB_2_STATUS="❌ Failed"
          fi
          
          # Check if this job failed (promotion failure)
          if [[ "${{ job.status }}" == "failure" ]]; then
            JOB_3_STATUS="❌ FAILED - Promotion blocked by policy violations"
            PROMOTION_FAILED="true"
          elif [[ "${{ needs.analyze-commit.outputs.create_app_version }}" == "true" ]]; then
            JOB_3_STATUS="✅ Completed"
            PROMOTION_FAILED="false"
          else
            JOB_3_STATUS="⏭️ Skipped (build-info only)"
            PROMOTION_FAILED="false"
          fi
          
          # Get real values instead of N/A
          REAL_COVERAGE="${{ needs.build-test-publish.outputs.coverage_percent }}"
          REAL_IMAGE_TAG="${{ needs.build-test-publish.outputs.image_tag }}"
          
          # Generate enhanced summary
          cat >> $GITHUB_STEP_SUMMARY << EOS
          ## 🚀 CI/CD Pipeline Summary - Inventory
          
          ### 📊 Pipeline Overview
          - **Service:** inventory
          - **Version:** ${APP_VERSION:-'N/A'}
          - **Build:** $BUILD_NAME #$BUILD_NUMBER
          - **Commit:** \`${{ github.sha }}\`
          - **Branch:** ${{ github.ref_name }}
          - **Status:** $(if [[ "$PROMOTION_FAILED" == "true" ]]; then echo "❌ **FAILED** - Policy violations detected"; else echo "✅ **SUCCESS**"; fi)
          
          ### 🔄 Job Execution Status
          - **Job 1 (analyze-commit):** $JOB_1_STATUS
          - **Job 2 (build-test-publish):** $JOB_2_STATUS  
          - **Job 3 (create-promote):** $JOB_3_STATUS
          
          ### 🛣️ Stage Lifecycle Path
          $(if [[ "$PROMOTION_FAILED" == "true" ]]; then
            echo "~~Unassigned~~ → **bookverse-DEV** 📍 → 🚫 **bookverse-QA** (BLOCKED) → STAGING → PROD"
          else
            echo "~~Unassigned~~ → **bookverse-DEV** ✅ → bookverse-QA → STAGING → PROD"
          fi)
          
          ### 📦 Artifacts & Quality
          - **Test Coverage:** ${REAL_COVERAGE:-'N/A'}%
          - **Docker Images:**
            - 📦 inventory: \`${REAL_IMAGE_TAG:-$IMAGE_NAME}\`
          - **Evidence Artifacts:** ✅ Collected and uploaded
          - **Build-Info:** ✅ Published with all artifacts
          
          $(if [[ "$PROMOTION_FAILED" == "true" ]]; then
            cat << POLICY_SECTION
          
          ### 🚨 Promotion Failure Details
          
          **Policy Violations Detected:**
          The promotion to QA stage was blocked due to policy violations. Common issues include:
          
          - 📋 **Evidence Required**: Missing required evidence artifacts
          - 🔐 **SBOM Required**: Software Bill of Materials not found  
          - 🧪 **Integration Tests**: Custom integration tests failed
          - 🎯 **Demo Policies**: Staging check or production readiness failures
          
          **Next Steps:**
          1. Review the workflow logs above for specific policy details
          2. Ensure all required evidence is collected and signed
          3. Verify integration tests are passing
          4. Check SBOM generation and attachment
          5. Re-run the workflow once issues are resolved
          
          POLICY_SECTION
          fi)
          
          ### 🛠️ Infrastructure Components
          These shared components support the inventory service:
          - **bookverse-core:** ✅ Shared libraries and common functionality
          - **bookverse-devops:** ✅ CI/CD patterns and evidence collection
          
          ### 🎯 Next Steps
          $(if [[ "$PROMOTION_FAILED" == "true" ]]; then
            echo "❌ **Action Required:** Fix the policy violations listed above and re-run the workflow"
          elif [[ "${{ needs.analyze-commit.outputs.create_app_version }}" == "true" ]]; then
            echo "✅ **Ready for QA:** Use the Promote workflow to advance to next stage"
          else
            echo "📋 **Build-info Created:** Use manual dispatch with \`force_app_version=true\` to create application version"
          fi)
          
          ---
          *Enhanced summary generated with accurate job status detection*
          EOS
          
          echo "✅ Enhanced summary generated with accurate reporting"
